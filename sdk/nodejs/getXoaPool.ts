// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides information about a pool.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as xenorchestra from "@vates/pulumi-xenorchestra";
 *
 * const pool = xenorchestra.getXoaPool({
 *     nameLabel: "Your pool",
 * });
 * const localStorage = pool.then(pool => xenorchestra.getXoaStorageRepository({
 *     nameLabel: "Your storage repository label",
 *     poolId: pool.id,
 * }));
 * ```
 */
export function getXoaPool(args: GetXoaPoolArgs, opts?: pulumi.InvokeOptions): Promise<GetXoaPoolResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("xenorchestra:index/getXoaPool:getXoaPool", {
        "nameLabel": args.nameLabel,
    }, opts);
}

/**
 * A collection of arguments for invoking getXoaPool.
 */
export interface GetXoaPoolArgs {
    /**
     * The nameLabel of the pool to look up.
     */
    nameLabel: string;
}

/**
 * A collection of values returned by getXoaPool.
 */
export interface GetXoaPoolResult {
    /**
     * CPU information about the pool. The 'cores' key will contain the number of cpu cores and the 'sockets' key will contain the number of sockets.
     */
    readonly cpus: {[key: string]: string};
    /**
     * The description of the pool.
     */
    readonly description: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The id of the primary instance in the pool.
     */
    readonly master: string;
    /**
     * The nameLabel of the pool to look up.
     */
    readonly nameLabel: string;
}
/**
 * Provides information about a pool.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as xenorchestra from "@vates/pulumi-xenorchestra";
 *
 * const pool = xenorchestra.getXoaPool({
 *     nameLabel: "Your pool",
 * });
 * const localStorage = pool.then(pool => xenorchestra.getXoaStorageRepository({
 *     nameLabel: "Your storage repository label",
 *     poolId: pool.id,
 * }));
 * ```
 */
export function getXoaPoolOutput(args: GetXoaPoolOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetXoaPoolResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("xenorchestra:index/getXoaPool:getXoaPool", {
        "nameLabel": args.nameLabel,
    }, opts);
}

/**
 * A collection of arguments for invoking getXoaPool.
 */
export interface GetXoaPoolOutputArgs {
    /**
     * The nameLabel of the pool to look up.
     */
    nameLabel: pulumi.Input<string>;
}
