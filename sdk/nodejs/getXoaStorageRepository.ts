// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as xenorchestra from "@vates/pulumi-xenorchestra";
 *
 * const localStorage = xenorchestra.getXoaStorageRepository({
 *     nameLabel: "Your storage repository label",
 * });
 * const demo_vm = new xenorchestra.Vm("demo-vm", {disks: [{
 *     srId: localStorage.then(localStorage => localStorage.id),
 *     nameLabel: "Ubuntu Bionic Beaver 18.04_imavo",
 *     size: 32212254720,
 * }]});
 * ```
 */
export function getXoaStorageRepository(args: GetXoaStorageRepositoryArgs, opts?: pulumi.InvokeOptions): Promise<GetXoaStorageRepositoryResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("xenorchestra:index/getXoaStorageRepository:getXoaStorageRepository", {
        "nameLabel": args.nameLabel,
        "poolId": args.poolId,
        "tags": args.tags,
    }, opts);
}

/**
 * A collection of arguments for invoking getXoaStorageRepository.
 */
export interface GetXoaStorageRepositoryArgs {
    /**
     * The name of the storage repository to look up
     */
    nameLabel: string;
    /**
     * The Id of the pool the storage repository exists on.
     */
    poolId?: string;
    /**
     * The tags (labels) applied to the given entity.
     */
    tags?: string[];
}

/**
 * A collection of values returned by getXoaStorageRepository.
 */
export interface GetXoaStorageRepositoryResult {
    /**
     * The storage container.
     */
    readonly container: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The name of the storage repository to look up
     */
    readonly nameLabel: string;
    /**
     * The physical storage size.
     */
    readonly physicalUsage: number;
    /**
     * The Id of the pool the storage repository exists on.
     */
    readonly poolId?: string;
    /**
     * The storage size.
     */
    readonly size: number;
    /**
     * The type of storage repository (lvm, udev, iso, user, etc).
     */
    readonly srType: string;
    /**
     * The tags (labels) applied to the given entity.
     */
    readonly tags?: string[];
    /**
     * The current usage for this storage repository.
     */
    readonly usage: number;
    /**
     * uuid of the storage repository. This is equivalent to the id.
     */
    readonly uuid: string;
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as xenorchestra from "@vates/pulumi-xenorchestra";
 *
 * const localStorage = xenorchestra.getXoaStorageRepository({
 *     nameLabel: "Your storage repository label",
 * });
 * const demo_vm = new xenorchestra.Vm("demo-vm", {disks: [{
 *     srId: localStorage.then(localStorage => localStorage.id),
 *     nameLabel: "Ubuntu Bionic Beaver 18.04_imavo",
 *     size: 32212254720,
 * }]});
 * ```
 */
export function getXoaStorageRepositoryOutput(args: GetXoaStorageRepositoryOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetXoaStorageRepositoryResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("xenorchestra:index/getXoaStorageRepository:getXoaStorageRepository", {
        "nameLabel": args.nameLabel,
        "poolId": args.poolId,
        "tags": args.tags,
    }, opts);
}

/**
 * A collection of arguments for invoking getXoaStorageRepository.
 */
export interface GetXoaStorageRepositoryOutputArgs {
    /**
     * The name of the storage repository to look up
     */
    nameLabel: pulumi.Input<string>;
    /**
     * The Id of the pool the storage repository exists on.
     */
    poolId?: pulumi.Input<string>;
    /**
     * The tags (labels) applied to the given entity.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
