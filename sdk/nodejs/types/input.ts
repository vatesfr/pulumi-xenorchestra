// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ResourceSetLimit {
    /**
     * The numerical limit for the given type.
     */
    quantity: pulumi.Input<number>;
    /**
     * The type of resource set limit. Must be cpus, memory or disk.
     */
    type: pulumi.Input<string>;
}

export interface VmCdrom {
    /**
     * The ID of the ISO (VDI) to attach to the VM. This can be easily provided by using the `vdi` data source.
     */
    id: pulumi.Input<string>;
}

export interface VmDisk {
    /**
     * Whether the device should be attached to the VM.
     */
    attached?: pulumi.Input<boolean>;
    /**
     * The description for the disk
     */
    nameDescription?: pulumi.Input<string>;
    /**
     * The name for the disk
     */
    nameLabel: pulumi.Input<string>;
    /**
     * Indicates the order of the block device.
     */
    position?: pulumi.Input<string>;
    /**
     * The size in bytes for the disk.
     */
    size: pulumi.Input<number>;
    /**
     * The storage repository ID to use.
     */
    srId: pulumi.Input<string>;
    vbdId?: pulumi.Input<string>;
    vdiId?: pulumi.Input<string>;
}

export interface VmNetwork {
    /**
     * Whether the device should be attached to the VM.
     */
    attached?: pulumi.Input<boolean>;
    device?: pulumi.Input<string>;
    /**
     * Determines the IP CIDR range the provider will wait for on this network interface. Resource creation is not complete until an IP address within the specified range becomes available. This parameter replaces the former `waitForIp` functionality. This only works if guest-tools are installed in the VM. Defaults to "", which skips IP address matching.
     */
    expectedIpCidr?: pulumi.Input<string>;
    ipv4Addresses?: pulumi.Input<pulumi.Input<string>[]>;
    ipv6Addresses?: pulumi.Input<pulumi.Input<string>[]>;
    macAddress?: pulumi.Input<string>;
    /**
     * The ID of the network the VM will be on.
     */
    networkId: pulumi.Input<string>;
}
