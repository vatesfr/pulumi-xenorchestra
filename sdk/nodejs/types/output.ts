// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface GetXoaHostsHost {
    /**
     * CPU information about the host. The 'cores' key will contain the number of cpu cores and the 'sockets' key will contain the number of sockets.
     */
    cpus: {[key: string]: number};
    id: string;
    /**
     * The memory size of the host.
     */
    memory: number;
    /**
     * The memory usage of the host.
     */
    memoryUsage: number;
    /**
     * The name label of the host.
     */
    nameLabel: string;
    /**
     * Id of the pool that the host belongs to.
     */
    poolId: string;
    /**
     * The tags (labels) applied to the given entity.
     */
    tags?: string[];
}

export interface GetXoaVmsVm {
    /**
     * The preferred host you would like the VM to run on. If changed on an existing VM it will require a reboot for the VM to be rescheduled.
     */
    affinityHost?: string;
    /**
     * If the VM will automatically turn on. Defaults to `false`.
     */
    autoPoweron?: boolean;
    /**
     * List of operations on a VM that are not permitted. Examples include: clean_reboot, clean_shutdown, hard_reboot, hard_shutdown, pause, shutdown, suspend, destroy. See: https://xapi-project.github.io/xen-api/classes/vm.html#enum_vm_operations
     */
    blockedOperations?: string[];
    /**
     * The type of clone to perform for the VM. Possible values include `fast` or `full` and defaults to `fast`. In order to perform a `full` clone, the VM template must not be a disk template.
     */
    cloneType?: string;
    /**
     * The content of the cloud-init config to use. See the cloud init docs for more [information](https://cloudinit.readthedocs.io/en/latest/topics/examples.html).
     */
    cloudConfig?: string;
    /**
     * The content of the cloud-init network configuration for the VM (uses [version 1](https://cloudinit.readthedocs.io/en/latest/topics/network-config-format-v1.html))
     */
    cloudNetworkConfig?: string;
    coreOs?: boolean;
    cpuCap?: number;
    cpuWeight?: number;
    /**
     * The number of CPUs the VM will have. Updates to this field will cause a stop and start of the VM if the new CPU value is greater than the max CPU value. This can be determined with the following command:
     * ```
     *
     * $ xo-cli xo.getAllObjects filter='json:{"id": "cf7b5d7d-3cd5-6b7c-5025-5c935c8cd0b8"}' | jq '.[].CPUs'
     * {
     *   "max": 4,
     *   "number": 2
     * }
     *
     * # Updating the VM to use 3 CPUs would happen without stopping/starting the VM
     * # Updating the VM to use 5 CPUs would stop/start the VM
     * ```
     */
    cpus: number;
    /**
     * The disk the VM will have access to.
     */
    disks: outputs.GetXoaVmsVmDisk[];
    /**
     * Boolean parameter that allows a VM to use nested virtualization.
     */
    expNestedHvm?: boolean;
    /**
     * The restart priority for the VM. Possible values are `best-effort`, `restart` and empty string (no restarts on failure. Defaults to empty string
     */
    highAvailability?: string;
    host?: string;
    /**
     * The firmware to use for the VM. Possible values are `bios` and `uefi`.
     */
    hvmBootFirmware?: string;
    id: string;
    ipv4Addresses: string[];
    /**
     * This is only accessible if guest-tools is installed in the VM. While the output contains a list of ipv6 addresses, the presence of an IP address is only guaranteed if `expectedIpCidr` is set for that interface. The list contains the ipv6 addresses across all network interfaces in order.
     */
    ipv6Addresses: string[];
    /**
     * The amount of memory in bytes the VM will have.\n\n!!! WARNING: Updates to this field will cause the VM to stop and start, as it sets both dynamic and static maximums.
     */
    memoryMax: number;
    /**
     * The amount of memory in bytes the VM will have. Set this value equal to memoryMax to have a static memory.
     */
    memoryMin: number;
    /**
     * The description of the VM.
     */
    nameDescription?: string;
    /**
     * The name of the VM.
     */
    nameLabel: string;
    /**
     * The network for the VM.
     */
    networks: outputs.GetXoaVmsVmNetwork[];
    /**
     * The power state of the VM. This can be Running, Halted, Paused or Suspended.
     */
    powerState?: string;
    resourceSet?: string;
    /**
     * Number of seconds the VM should be delayed from starting.
     */
    startDelay?: number;
    /**
     * The tags (labels) applied to the given entity.
     */
    tags?: string[];
    /**
     * The ID of the VM template to create the new VM from.
     */
    template: string;
    /**
     * The video adapter the VM should use. Possible values include std and cirrus.
     */
    vga?: string;
    /**
     * The videoram option the VM should use. Possible values include 1, 2, 4, 8, 16
     */
    videoram?: number;
    /**
     * The key value pairs to be populated in xenstore.
     */
    xenstore?: {[key: string]: string};
}

export interface GetXoaVmsVmDisk {
    /**
     * Whether the device should be attached to the VM.
     */
    attached?: boolean;
    /**
     * The description for the disk
     */
    nameDescription?: string;
    /**
     * The name for the disk
     */
    nameLabel: string;
    /**
     * Indicates the order of the block device.
     */
    position: string;
    /**
     * The size in bytes for the disk.
     */
    size: number;
    /**
     * The storage repository ID to use.
     */
    srId: string;
    vbdId: string;
    vdiId: string;
}

export interface GetXoaVmsVmNetwork {
    /**
     * Whether the device should be attached to the VM.
     */
    attached?: boolean;
    device: string;
    /**
     * Determines the IP CIDR range the provider will wait for on this network interface. Resource creation is not complete until an IP address within the specified range becomes available. This parameter replaces the former `waitForIp` functionality. This only works if guest-tools are installed in the VM. Defaults to "", which skips IP address matching.
     */
    expectedIpCidr?: string;
    ipv4Addresses: string[];
    ipv6Addresses: string[];
    macAddress: string;
    /**
     * The ID of the network the VM will be on.
     */
    networkId: string;
}

export interface ResourceSetLimit {
    /**
     * The numerical limit for the given type.
     */
    quantity: number;
    /**
     * The type of resource set limit. Must be cpus, memory or disk.
     */
    type: string;
}

export interface VmCdrom {
    /**
     * The ID of the ISO (VDI) to attach to the VM. This can be easily provided by using the `vdi` data source.
     */
    id: string;
}

export interface VmDisk {
    /**
     * Whether the device should be attached to the VM.
     */
    attached?: boolean;
    /**
     * The description for the disk
     */
    nameDescription?: string;
    /**
     * The name for the disk
     */
    nameLabel: string;
    /**
     * Indicates the order of the block device.
     */
    position: string;
    /**
     * The size in bytes for the disk.
     */
    size: number;
    /**
     * The storage repository ID to use.
     */
    srId: string;
    vbdId: string;
    vdiId: string;
}

export interface VmNetwork {
    /**
     * Whether the device should be attached to the VM.
     */
    attached?: boolean;
    device: string;
    /**
     * Determines the IP CIDR range the provider will wait for on this network interface. Resource creation is not complete until an IP address within the specified range becomes available. This parameter replaces the former `waitForIp` functionality. This only works if guest-tools are installed in the VM. Defaults to "", which skips IP address matching.
     */
    expectedIpCidr?: string;
    ipv4Addresses: string[];
    ipv6Addresses: string[];
    macAddress: string;
    /**
     * The ID of the network the VM will be on.
     */
    networkId: string;
}

