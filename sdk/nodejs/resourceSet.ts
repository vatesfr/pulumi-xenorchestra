// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Creates a Xen Orchestra resource set.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as xenorchestra from "@vates/pulumi-xenorchestra";
 *
 * const template = xenorchestra.getXoaTemplate({
 *     nameLabel: "Ubuntu Bionic Beaver 18.04",
 * });
 * const sr = xenorchestra.getXoaStorageRepository({
 *     nameLabel: "Your storage repository label",
 * });
 * const eth0 = xenorchestra.getXoaPif({
 *     device: "eth0",
 *     vlan: -1,
 * });
 * const user = xenorchestra.getXoaUser({
 *     username: "test_user",
 * });
 * const rs = new xenorchestra.ResourceSet("rs", {
 *     name: "new-resource-set",
 *     subjects: [user.then(user => user.id)],
 *     objects: [
 *         template.then(template => template.id),
 *         sr.then(sr => sr.id),
 *         eth0.then(eth0 => eth0.network),
 *     ],
 *     limits: [
 *         {
 *             type: "cpus",
 *             quantity: 20,
 *         },
 *         {
 *             type: "disk",
 *             quantity: 107374182400,
 *         },
 *         {
 *             type: "memory",
 *             quantity: 12884901888,
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * ID can be found from the following command:
 *
 * $ xo-cli resourceSet.getAll
 *
 * ```sh
 * $ pulumi import xenorchestra:index/resourceSet:ResourceSet rs MGSpuwnbtUE
 * ```
 */
export class ResourceSet extends pulumi.CustomResource {
    /**
     * Get an existing ResourceSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ResourceSetState, opts?: pulumi.CustomResourceOptions): ResourceSet {
        return new ResourceSet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'xenorchestra:index/resourceSet:ResourceSet';

    /**
     * Returns true if the given object is an instance of ResourceSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ResourceSet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ResourceSet.__pulumiType;
    }

    /**
     * The limit applied to the resource set.
     */
    public readonly limits!: pulumi.Output<outputs.ResourceSetLimit[]>;
    /**
     * The name of the resource set.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The uuids of the objects that are within scope of the resource set. A minimum of a storage repository, network and VM template are required for users to launch VMs.
     */
    public readonly objects!: pulumi.Output<string[] | undefined>;
    /**
     * The uuids of the user accounts that should have access to the resource set.
     */
    public readonly subjects!: pulumi.Output<string[] | undefined>;

    /**
     * Create a ResourceSet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ResourceSetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ResourceSetArgs | ResourceSetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ResourceSetState | undefined;
            resourceInputs["limits"] = state ? state.limits : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["objects"] = state ? state.objects : undefined;
            resourceInputs["subjects"] = state ? state.subjects : undefined;
        } else {
            const args = argsOrState as ResourceSetArgs | undefined;
            if ((!args || args.limits === undefined) && !opts.urn) {
                throw new Error("Missing required property 'limits'");
            }
            resourceInputs["limits"] = args ? args.limits : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["objects"] = args ? args.objects : undefined;
            resourceInputs["subjects"] = args ? args.subjects : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ResourceSet.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ResourceSet resources.
 */
export interface ResourceSetState {
    /**
     * The limit applied to the resource set.
     */
    limits?: pulumi.Input<pulumi.Input<inputs.ResourceSetLimit>[]>;
    /**
     * The name of the resource set.
     */
    name?: pulumi.Input<string>;
    /**
     * The uuids of the objects that are within scope of the resource set. A minimum of a storage repository, network and VM template are required for users to launch VMs.
     */
    objects?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The uuids of the user accounts that should have access to the resource set.
     */
    subjects?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ResourceSet resource.
 */
export interface ResourceSetArgs {
    /**
     * The limit applied to the resource set.
     */
    limits: pulumi.Input<pulumi.Input<inputs.ResourceSetLimit>[]>;
    /**
     * The name of the resource set.
     */
    name?: pulumi.Input<string>;
    /**
     * The uuids of the objects that are within scope of the resource set. A minimum of a storage repository, network and VM template are required for users to launch VMs.
     */
    objects?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The uuids of the user accounts that should have access to the resource set.
     */
    subjects?: pulumi.Input<pulumi.Input<string>[]>;
}
