// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as xenorchestra from "@vates/pulumi-xenorchestra";
 *
 * const host1 = xenorchestra.getXoaHost({
 *     nameLabel: "Your host",
 * });
 * // Create a single server network private network
 * const privateNetwork = new xenorchestra.XoaNetwork("private_network", {
 *     nameLabel: "new network name",
 *     poolId: host1.then(host1 => host1.poolId),
 * });
 * // Create a network with a 22 VLAN tag from the eth0 device
 * const vlanNetwork = new xenorchestra.XoaNetwork("vlan_network", {
 *     nameLabel: "new network name",
 *     poolId: host1.then(host1 => host1.poolId),
 *     sourcePifDevice: "eth0",
 *     vlan: 22,
 * });
 * ```
 */
export class XoaNetwork extends pulumi.CustomResource {
    /**
     * Get an existing XoaNetwork resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: XoaNetworkState, opts?: pulumi.CustomResourceOptions): XoaNetwork {
        return new XoaNetwork(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'xenorchestra:index/xoaNetwork:XoaNetwork';

    /**
     * Returns true if the given object is an instance of XoaNetwork.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is XoaNetwork {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === XoaNetwork.__pulumiType;
    }

    public readonly automatic!: pulumi.Output<boolean | undefined>;
    /**
     * This argument controls whether the network should enforce VIF locking. This defaults to `false` which means that no filtering rules are applied.
     */
    public readonly defaultIsLocked!: pulumi.Output<boolean | undefined>;
    /**
     * The MTU of the network. Defaults to `1500` if unspecified.
     */
    public readonly mtu!: pulumi.Output<number | undefined>;
    public readonly nameDescription!: pulumi.Output<string | undefined>;
    /**
     * The name label of the network.
     */
    public readonly nameLabel!: pulumi.Output<string>;
    /**
     * Whether the network should use a network block device. Defaults to `false` if unspecified.
     */
    public readonly nbd!: pulumi.Output<boolean | undefined>;
    /**
     * The pool id that this network should belong to.
     */
    public readonly poolId!: pulumi.Output<string>;
    /**
     * The PIF device (eth0, eth1, etc) that will be used as an input during network creation. This parameter is required if a vlan is specified.
     */
    public readonly sourcePifDevice!: pulumi.Output<string | undefined>;
    /**
     * The vlan to use for the network. Defaults to `0` meaning no VLAN.
     */
    public readonly vlan!: pulumi.Output<number | undefined>;

    /**
     * Create a XoaNetwork resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: XoaNetworkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: XoaNetworkArgs | XoaNetworkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as XoaNetworkState | undefined;
            resourceInputs["automatic"] = state ? state.automatic : undefined;
            resourceInputs["defaultIsLocked"] = state ? state.defaultIsLocked : undefined;
            resourceInputs["mtu"] = state ? state.mtu : undefined;
            resourceInputs["nameDescription"] = state ? state.nameDescription : undefined;
            resourceInputs["nameLabel"] = state ? state.nameLabel : undefined;
            resourceInputs["nbd"] = state ? state.nbd : undefined;
            resourceInputs["poolId"] = state ? state.poolId : undefined;
            resourceInputs["sourcePifDevice"] = state ? state.sourcePifDevice : undefined;
            resourceInputs["vlan"] = state ? state.vlan : undefined;
        } else {
            const args = argsOrState as XoaNetworkArgs | undefined;
            if ((!args || args.nameLabel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nameLabel'");
            }
            if ((!args || args.poolId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'poolId'");
            }
            resourceInputs["automatic"] = args ? args.automatic : undefined;
            resourceInputs["defaultIsLocked"] = args ? args.defaultIsLocked : undefined;
            resourceInputs["mtu"] = args ? args.mtu : undefined;
            resourceInputs["nameDescription"] = args ? args.nameDescription : undefined;
            resourceInputs["nameLabel"] = args ? args.nameLabel : undefined;
            resourceInputs["nbd"] = args ? args.nbd : undefined;
            resourceInputs["poolId"] = args ? args.poolId : undefined;
            resourceInputs["sourcePifDevice"] = args ? args.sourcePifDevice : undefined;
            resourceInputs["vlan"] = args ? args.vlan : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "xenorchestra:index/network:Network" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(XoaNetwork.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering XoaNetwork resources.
 */
export interface XoaNetworkState {
    automatic?: pulumi.Input<boolean>;
    /**
     * This argument controls whether the network should enforce VIF locking. This defaults to `false` which means that no filtering rules are applied.
     */
    defaultIsLocked?: pulumi.Input<boolean>;
    /**
     * The MTU of the network. Defaults to `1500` if unspecified.
     */
    mtu?: pulumi.Input<number>;
    nameDescription?: pulumi.Input<string>;
    /**
     * The name label of the network.
     */
    nameLabel?: pulumi.Input<string>;
    /**
     * Whether the network should use a network block device. Defaults to `false` if unspecified.
     */
    nbd?: pulumi.Input<boolean>;
    /**
     * The pool id that this network should belong to.
     */
    poolId?: pulumi.Input<string>;
    /**
     * The PIF device (eth0, eth1, etc) that will be used as an input during network creation. This parameter is required if a vlan is specified.
     */
    sourcePifDevice?: pulumi.Input<string>;
    /**
     * The vlan to use for the network. Defaults to `0` meaning no VLAN.
     */
    vlan?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a XoaNetwork resource.
 */
export interface XoaNetworkArgs {
    automatic?: pulumi.Input<boolean>;
    /**
     * This argument controls whether the network should enforce VIF locking. This defaults to `false` which means that no filtering rules are applied.
     */
    defaultIsLocked?: pulumi.Input<boolean>;
    /**
     * The MTU of the network. Defaults to `1500` if unspecified.
     */
    mtu?: pulumi.Input<number>;
    nameDescription?: pulumi.Input<string>;
    /**
     * The name label of the network.
     */
    nameLabel: pulumi.Input<string>;
    /**
     * Whether the network should use a network block device. Defaults to `false` if unspecified.
     */
    nbd?: pulumi.Input<boolean>;
    /**
     * The pool id that this network should belong to.
     */
    poolId: pulumi.Input<string>;
    /**
     * The PIF device (eth0, eth1, etc) that will be used as an input during network creation. This parameter is required if a vlan is specified.
     */
    sourcePifDevice?: pulumi.Input<string>;
    /**
     * The vlan to use for the network. Defaults to `0` meaning no VLAN.
     */
    vlan?: pulumi.Input<number>;
}
