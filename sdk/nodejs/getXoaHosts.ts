// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Use this data source to filter Xenorchestra hosts by certain criteria (name_label, tags) for use in other resources.
 */
export function getXoaHosts(args: GetXoaHostsArgs, opts?: pulumi.InvokeOptions): Promise<GetXoaHostsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("xenorchestra:index/getXoaHosts:getXoaHosts", {
        "poolId": args.poolId,
        "sortBy": args.sortBy,
        "sortOrder": args.sortOrder,
        "tags": args.tags,
    }, opts);
}

/**
 * A collection of arguments for invoking getXoaHosts.
 */
export interface GetXoaHostsArgs {
    /**
     * The pool id used to filter the resulting hosts by.
     */
    poolId: string;
    /**
     * The host field to sort the results by (id and nameLabel are supported).
     */
    sortBy?: string;
    /**
     * Valid options are `asc` or `desc` and sort order is applied to `sortBy` argument.
     */
    sortOrder?: string;
    /**
     * The tags (labels) applied to the given entity.
     */
    tags?: string[];
}

/**
 * A collection of values returned by getXoaHosts.
 */
export interface GetXoaHostsResult {
    /**
     * The resulting hosts after applying the argument filtering.
     */
    readonly hosts: outputs.GetXoaHostsHost[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The primary host of the pool.
     */
    readonly master: string;
    /**
     * The pool id used to filter the resulting hosts by.
     */
    readonly poolId: string;
    /**
     * The host field to sort the results by (id and nameLabel are supported).
     */
    readonly sortBy?: string;
    /**
     * Valid options are `asc` or `desc` and sort order is applied to `sortBy` argument.
     */
    readonly sortOrder?: string;
    /**
     * The tags (labels) applied to the given entity.
     */
    readonly tags?: string[];
}
/**
 * Use this data source to filter Xenorchestra hosts by certain criteria (name_label, tags) for use in other resources.
 */
export function getXoaHostsOutput(args: GetXoaHostsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetXoaHostsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("xenorchestra:index/getXoaHosts:getXoaHosts", {
        "poolId": args.poolId,
        "sortBy": args.sortBy,
        "sortOrder": args.sortOrder,
        "tags": args.tags,
    }, opts);
}

/**
 * A collection of arguments for invoking getXoaHosts.
 */
export interface GetXoaHostsOutputArgs {
    /**
     * The pool id used to filter the resulting hosts by.
     */
    poolId: pulumi.Input<string>;
    /**
     * The host field to sort the results by (id and nameLabel are supported).
     */
    sortBy?: pulumi.Input<string>;
    /**
     * Valid options are `asc` or `desc` and sort order is applied to `sortBy` argument.
     */
    sortOrder?: pulumi.Input<string>;
    /**
     * The tags (labels) applied to the given entity.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
