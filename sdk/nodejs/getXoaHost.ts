// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as xenorchestra from "@vates/pulumi-xenorchestra";
 *
 * const host1 = xenorchestra.getXoaHost({
 *     nameLabel: "Your host",
 * });
 * const node = new xenorchestra.Vm("node", {affinityHost: host1.then(host1 => host1.id)});
 * ```
 */
export function getXoaHost(args: GetXoaHostArgs, opts?: pulumi.InvokeOptions): Promise<GetXoaHostResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("xenorchestra:index/getXoaHost:getXoaHost", {
        "nameLabel": args.nameLabel,
        "tags": args.tags,
    }, opts);
}

/**
 * A collection of arguments for invoking getXoaHost.
 */
export interface GetXoaHostArgs {
    /**
     * The name label of the host.
     */
    nameLabel: string;
    /**
     * The tags (labels) applied to the given entity.
     */
    tags?: string[];
}

/**
 * A collection of values returned by getXoaHost.
 */
export interface GetXoaHostResult {
    /**
     * CPU information about the host. The 'cores' key will contain the number of cpu cores and the 'sockets' key will contain the number of sockets.
     */
    readonly cpus: {[key: string]: number};
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The memory size of the host.
     */
    readonly memory: number;
    /**
     * The memory usage of the host.
     */
    readonly memoryUsage: number;
    /**
     * The name label of the host.
     */
    readonly nameLabel: string;
    /**
     * Id of the pool that the host belongs to.
     */
    readonly poolId: string;
    /**
     * The tags (labels) applied to the given entity.
     */
    readonly tags?: string[];
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as xenorchestra from "@vates/pulumi-xenorchestra";
 *
 * const host1 = xenorchestra.getXoaHost({
 *     nameLabel: "Your host",
 * });
 * const node = new xenorchestra.Vm("node", {affinityHost: host1.then(host1 => host1.id)});
 * ```
 */
export function getXoaHostOutput(args: GetXoaHostOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetXoaHostResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("xenorchestra:index/getXoaHost:getXoaHost", {
        "nameLabel": args.nameLabel,
        "tags": args.tags,
    }, opts);
}

/**
 * A collection of arguments for invoking getXoaHost.
 */
export interface GetXoaHostOutputArgs {
    /**
     * The name label of the host.
     */
    nameLabel: pulumi.Input<string>;
    /**
     * The tags (labels) applied to the given entity.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
