// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Creates a Xen Orchestra vdi resource.
 */
export class Vdi extends pulumi.CustomResource {
    /**
     * Get an existing Vdi resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VdiState, opts?: pulumi.CustomResourceOptions): Vdi {
        return new Vdi(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'xenorchestra:index/vdi:Vdi';

    /**
     * Returns true if the given object is an instance of Vdi.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vdi {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vdi.__pulumiType;
    }

    /**
     * The file path to the ISO or vdi image that should be uploaded when the VDI is created.
     */
    public readonly filepath!: pulumi.Output<string>;
    /**
     * The name label of the VDI
     */
    public readonly nameLabel!: pulumi.Output<string>;
    /**
     * The id of the storage repository the VDI should be created in. Make sure the storage repository supports the file you are uploading! For example, ISOs should only be uploaded to ISO storage repositories.
     */
    public readonly srId!: pulumi.Output<string>;
    /**
     * Only `raw` uploads are supported today, but vhd support may be added in the future.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a Vdi resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VdiArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VdiArgs | VdiState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VdiState | undefined;
            resourceInputs["filepath"] = state ? state.filepath : undefined;
            resourceInputs["nameLabel"] = state ? state.nameLabel : undefined;
            resourceInputs["srId"] = state ? state.srId : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as VdiArgs | undefined;
            if ((!args || args.filepath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filepath'");
            }
            if ((!args || args.nameLabel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nameLabel'");
            }
            if ((!args || args.srId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'srId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["filepath"] = args ? args.filepath : undefined;
            resourceInputs["nameLabel"] = args ? args.nameLabel : undefined;
            resourceInputs["srId"] = args ? args.srId : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Vdi.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Vdi resources.
 */
export interface VdiState {
    /**
     * The file path to the ISO or vdi image that should be uploaded when the VDI is created.
     */
    filepath?: pulumi.Input<string>;
    /**
     * The name label of the VDI
     */
    nameLabel?: pulumi.Input<string>;
    /**
     * The id of the storage repository the VDI should be created in. Make sure the storage repository supports the file you are uploading! For example, ISOs should only be uploaded to ISO storage repositories.
     */
    srId?: pulumi.Input<string>;
    /**
     * Only `raw` uploads are supported today, but vhd support may be added in the future.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Vdi resource.
 */
export interface VdiArgs {
    /**
     * The file path to the ISO or vdi image that should be uploaded when the VDI is created.
     */
    filepath: pulumi.Input<string>;
    /**
     * The name label of the VDI
     */
    nameLabel: pulumi.Input<string>;
    /**
     * The id of the storage repository the VDI should be created in. Make sure the storage repository supports the file you are uploading! For example, ISOs should only be uploaded to ISO storage repositories.
     */
    srId: pulumi.Input<string>;
    /**
     * Only `raw` uploads are supported today, but vhd support may be added in the future.
     */
    type: pulumi.Input<string>;
}
