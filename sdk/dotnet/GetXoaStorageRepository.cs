// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Xenorchestra
{
    public static class GetXoaStorageRepository
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Xenorchestra = Pulumi.Xenorchestra;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var localStorage = Xenorchestra.GetXoaStorageRepository.Invoke(new()
        ///     {
        ///         NameLabel = "Your storage repository label",
        ///     });
        /// 
        ///     var demo_vm = new Xenorchestra.Vm("demo-vm", new()
        ///     {
        ///         Disks = new[]
        ///         {
        ///             new Xenorchestra.Inputs.VmDiskArgs
        ///             {
        ///                 SrId = localStorage.Apply(getXoaStorageRepositoryResult =&gt; getXoaStorageRepositoryResult.Id),
        ///                 NameLabel = "Ubuntu Bionic Beaver 18.04_imavo",
        ///                 Size = 32212254720,
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetXoaStorageRepositoryResult> InvokeAsync(GetXoaStorageRepositoryArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetXoaStorageRepositoryResult>("xenorchestra:index/getXoaStorageRepository:getXoaStorageRepository", args ?? new GetXoaStorageRepositoryArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Xenorchestra = Pulumi.Xenorchestra;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var localStorage = Xenorchestra.GetXoaStorageRepository.Invoke(new()
        ///     {
        ///         NameLabel = "Your storage repository label",
        ///     });
        /// 
        ///     var demo_vm = new Xenorchestra.Vm("demo-vm", new()
        ///     {
        ///         Disks = new[]
        ///         {
        ///             new Xenorchestra.Inputs.VmDiskArgs
        ///             {
        ///                 SrId = localStorage.Apply(getXoaStorageRepositoryResult =&gt; getXoaStorageRepositoryResult.Id),
        ///                 NameLabel = "Ubuntu Bionic Beaver 18.04_imavo",
        ///                 Size = 32212254720,
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetXoaStorageRepositoryResult> Invoke(GetXoaStorageRepositoryInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetXoaStorageRepositoryResult>("xenorchestra:index/getXoaStorageRepository:getXoaStorageRepository", args ?? new GetXoaStorageRepositoryInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Xenorchestra = Pulumi.Xenorchestra;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var localStorage = Xenorchestra.GetXoaStorageRepository.Invoke(new()
        ///     {
        ///         NameLabel = "Your storage repository label",
        ///     });
        /// 
        ///     var demo_vm = new Xenorchestra.Vm("demo-vm", new()
        ///     {
        ///         Disks = new[]
        ///         {
        ///             new Xenorchestra.Inputs.VmDiskArgs
        ///             {
        ///                 SrId = localStorage.Apply(getXoaStorageRepositoryResult =&gt; getXoaStorageRepositoryResult.Id),
        ///                 NameLabel = "Ubuntu Bionic Beaver 18.04_imavo",
        ///                 Size = 32212254720,
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetXoaStorageRepositoryResult> Invoke(GetXoaStorageRepositoryInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetXoaStorageRepositoryResult>("xenorchestra:index/getXoaStorageRepository:getXoaStorageRepository", args ?? new GetXoaStorageRepositoryInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetXoaStorageRepositoryArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the storage repository to look up
        /// </summary>
        [Input("nameLabel", required: true)]
        public string NameLabel { get; set; } = null!;

        /// <summary>
        /// The Id of the pool the storage repository exists on.
        /// </summary>
        [Input("poolId")]
        public string? PoolId { get; set; }

        [Input("tags")]
        private List<string>? _tags;

        /// <summary>
        /// The tags (labels) applied to the given entity.
        /// </summary>
        public List<string> Tags
        {
            get => _tags ?? (_tags = new List<string>());
            set => _tags = value;
        }

        public GetXoaStorageRepositoryArgs()
        {
        }
        public static new GetXoaStorageRepositoryArgs Empty => new GetXoaStorageRepositoryArgs();
    }

    public sealed class GetXoaStorageRepositoryInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the storage repository to look up
        /// </summary>
        [Input("nameLabel", required: true)]
        public Input<string> NameLabel { get; set; } = null!;

        /// <summary>
        /// The Id of the pool the storage repository exists on.
        /// </summary>
        [Input("poolId")]
        public Input<string>? PoolId { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The tags (labels) applied to the given entity.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public GetXoaStorageRepositoryInvokeArgs()
        {
        }
        public static new GetXoaStorageRepositoryInvokeArgs Empty => new GetXoaStorageRepositoryInvokeArgs();
    }


    [OutputType]
    public sealed class GetXoaStorageRepositoryResult
    {
        /// <summary>
        /// The storage container.
        /// </summary>
        public readonly string Container;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the storage repository to look up
        /// </summary>
        public readonly string NameLabel;
        /// <summary>
        /// The physical storage size.
        /// </summary>
        public readonly double PhysicalUsage;
        /// <summary>
        /// The Id of the pool the storage repository exists on.
        /// </summary>
        public readonly string? PoolId;
        /// <summary>
        /// The storage size.
        /// </summary>
        public readonly double Size;
        /// <summary>
        /// The type of storage repository (lvm, udev, iso, user, etc).
        /// </summary>
        public readonly string SrType;
        /// <summary>
        /// The tags (labels) applied to the given entity.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// The current usage for this storage repository.
        /// </summary>
        public readonly double Usage;
        /// <summary>
        /// uuid of the storage repository. This is equivalent to the id.
        /// </summary>
        public readonly string Uuid;

        [OutputConstructor]
        private GetXoaStorageRepositoryResult(
            string container,

            string id,

            string nameLabel,

            double physicalUsage,

            string? poolId,

            double size,

            string srType,

            ImmutableArray<string> tags,

            double usage,

            string uuid)
        {
            Container = container;
            Id = id;
            NameLabel = nameLabel;
            PhysicalUsage = physicalUsage;
            PoolId = poolId;
            Size = size;
            SrType = srType;
            Tags = tags;
            Usage = usage;
            Uuid = uuid;
        }
    }
}
