// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Xenorchestra
{
    public static class GetXoaNetwork
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Xenorchestra = Pulumi.Xenorchestra;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var net = Xenorchestra.GetXoaNetwork.Invoke(new()
        ///     {
        ///         NameLabel = "Pool-wide network associated with eth0",
        ///     });
        /// 
        ///     var demo_vm = new Xenorchestra.Vm("demo-vm", new()
        ///     {
        ///         Networks = new[]
        ///         {
        ///             new Xenorchestra.Inputs.VmNetworkArgs
        ///             {
        ///                 NetworkId = net.Apply(getXoaNetworkResult =&gt; getXoaNetworkResult.Id),
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetXoaNetworkResult> InvokeAsync(GetXoaNetworkArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetXoaNetworkResult>("xenorchestra:index/getXoaNetwork:getXoaNetwork", args ?? new GetXoaNetworkArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Xenorchestra = Pulumi.Xenorchestra;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var net = Xenorchestra.GetXoaNetwork.Invoke(new()
        ///     {
        ///         NameLabel = "Pool-wide network associated with eth0",
        ///     });
        /// 
        ///     var demo_vm = new Xenorchestra.Vm("demo-vm", new()
        ///     {
        ///         Networks = new[]
        ///         {
        ///             new Xenorchestra.Inputs.VmNetworkArgs
        ///             {
        ///                 NetworkId = net.Apply(getXoaNetworkResult =&gt; getXoaNetworkResult.Id),
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetXoaNetworkResult> Invoke(GetXoaNetworkInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetXoaNetworkResult>("xenorchestra:index/getXoaNetwork:getXoaNetwork", args ?? new GetXoaNetworkInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Xenorchestra = Pulumi.Xenorchestra;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var net = Xenorchestra.GetXoaNetwork.Invoke(new()
        ///     {
        ///         NameLabel = "Pool-wide network associated with eth0",
        ///     });
        /// 
        ///     var demo_vm = new Xenorchestra.Vm("demo-vm", new()
        ///     {
        ///         Networks = new[]
        ///         {
        ///             new Xenorchestra.Inputs.VmNetworkArgs
        ///             {
        ///                 NetworkId = net.Apply(getXoaNetworkResult =&gt; getXoaNetworkResult.Id),
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetXoaNetworkResult> Invoke(GetXoaNetworkInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetXoaNetworkResult>("xenorchestra:index/getXoaNetwork:getXoaNetwork", args ?? new GetXoaNetworkInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetXoaNetworkArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the bridge network interface.
        /// </summary>
        [Input("bridge")]
        public string? Bridge { get; set; }

        /// <summary>
        /// The name of the network.
        /// </summary>
        [Input("nameLabel", required: true)]
        public string NameLabel { get; set; } = null!;

        /// <summary>
        /// The pool the network is associated with.
        /// </summary>
        [Input("poolId")]
        public string? PoolId { get; set; }

        public GetXoaNetworkArgs()
        {
        }
        public static new GetXoaNetworkArgs Empty => new GetXoaNetworkArgs();
    }

    public sealed class GetXoaNetworkInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the bridge network interface.
        /// </summary>
        [Input("bridge")]
        public Input<string>? Bridge { get; set; }

        /// <summary>
        /// The name of the network.
        /// </summary>
        [Input("nameLabel", required: true)]
        public Input<string> NameLabel { get; set; } = null!;

        /// <summary>
        /// The pool the network is associated with.
        /// </summary>
        [Input("poolId")]
        public Input<string>? PoolId { get; set; }

        public GetXoaNetworkInvokeArgs()
        {
        }
        public static new GetXoaNetworkInvokeArgs Empty => new GetXoaNetworkInvokeArgs();
    }


    [OutputType]
    public sealed class GetXoaNetworkResult
    {
        /// <summary>
        /// The name of the bridge network interface.
        /// </summary>
        public readonly string Bridge;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the network.
        /// </summary>
        public readonly string NameLabel;
        /// <summary>
        /// The pool the network is associated with.
        /// </summary>
        public readonly string? PoolId;

        [OutputConstructor]
        private GetXoaNetworkResult(
            string bridge,

            string id,

            string nameLabel,

            string? poolId)
        {
            Bridge = bridge;
            Id = id;
            NameLabel = nameLabel;
            PoolId = poolId;
        }
    }
}
