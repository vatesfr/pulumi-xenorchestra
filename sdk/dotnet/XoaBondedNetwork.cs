// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Xenorchestra
{
    /// <summary>
    /// A resource for managing Bonded Xen Orchestra networks. See the XCP-ng [networking docs](https://xcp-ng.org/docs/networking.html) for more details.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Xenorchestra = Pulumi.Xenorchestra;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var host1 = Xenorchestra.GetXoaHost.Invoke(new()
    ///     {
    ///         NameLabel = "Your host",
    ///     });
    /// 
    ///     var eth1 = Xenorchestra.GetXoaPif.Invoke(new()
    ///     {
    ///         Device = "eth1",
    ///         Vlan = -1,
    ///         HostId = host1.Apply(getXoaHostResult =&gt; getXoaHostResult.Id),
    ///     });
    /// 
    ///     var eth2 = Xenorchestra.GetXoaPif.Invoke(new()
    ///     {
    ///         Device = "eth2",
    ///         Vlan = -1,
    ///         HostId = host1.Apply(getXoaHostResult =&gt; getXoaHostResult.Id),
    ///     });
    /// 
    ///     // Create a bonded network from normal PIFs
    ///     var network = new Xenorchestra.XoaBondedNetwork("network", new()
    ///     {
    ///         NameLabel = "new network name",
    ///         BondMode = "active-backup",
    ///         PoolId = host1.Apply(getXoaHostResult =&gt; getXoaHostResult.PoolId),
    ///         PifIds = new[]
    ///         {
    ///             eth1.Apply(getXoaPifResult =&gt; getXoaPifResult.Id),
    ///             eth2.Apply(getXoaPifResult =&gt; getXoaPifResult.Id),
    ///         },
    ///     });
    /// 
    ///     // Create a bonded network from PIFs on VLANs
    ///     var eth1Vlan = Xenorchestra.GetXoaPif.Invoke(new()
    ///     {
    ///         Device = "eth1",
    ///         Vlan = 15,
    ///         HostId = host1.Apply(getXoaHostResult =&gt; getXoaHostResult.Id),
    ///     });
    /// 
    ///     var eth2Vlan = Xenorchestra.GetXoaPif.Invoke(new()
    ///     {
    ///         Device = "eth2",
    ///         Vlan = 15,
    ///         HostId = host1.Apply(getXoaHostResult =&gt; getXoaHostResult.Id),
    ///     });
    /// 
    ///     // Create a bonded network from normal PIFs
    ///     var networkVlan = new Xenorchestra.XoaBondedNetwork("network_vlan", new()
    ///     {
    ///         NameLabel = "new network name",
    ///         BondMode = "active-backup",
    ///         PoolId = host1.Apply(getXoaHostResult =&gt; getXoaHostResult.PoolId),
    ///         PifIds = new[]
    ///         {
    ///             eth1Vlan.Apply(getXoaPifResult =&gt; getXoaPifResult.Id),
    ///             eth2Vlan.Apply(getXoaPifResult =&gt; getXoaPifResult.Id),
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [XenorchestraResourceType("xenorchestra:index/xoaBondedNetwork:XoaBondedNetwork")]
    public partial class XoaBondedNetwork : global::Pulumi.CustomResource
    {
        [Output("automatic")]
        public Output<bool?> Automatic { get; private set; } = null!;

        /// <summary>
        /// The bond mode that should be used for this network.
        /// </summary>
        [Output("bondMode")]
        public Output<string> BondMode { get; private set; } = null!;

        /// <summary>
        /// This argument controls whether the network should enforce VIF locking. This defaults to `false` which means that no filtering rules are applied.
        /// </summary>
        [Output("defaultIsLocked")]
        public Output<bool?> DefaultIsLocked { get; private set; } = null!;

        /// <summary>
        /// The MTU of the network. Defaults to `1500` if unspecified.
        /// </summary>
        [Output("mtu")]
        public Output<int?> Mtu { get; private set; } = null!;

        [Output("nameDescription")]
        public Output<string?> NameDescription { get; private set; } = null!;

        /// <summary>
        /// The name label of the network.
        /// </summary>
        [Output("nameLabel")]
        public Output<string> NameLabel { get; private set; } = null!;

        /// <summary>
        /// The PIFs (uuid) that should be used for this network.
        /// </summary>
        [Output("pifIds")]
        public Output<ImmutableArray<string>> PifIds { get; private set; } = null!;

        /// <summary>
        /// The pool id that this network should belong to.
        /// </summary>
        [Output("poolId")]
        public Output<string> PoolId { get; private set; } = null!;


        /// <summary>
        /// Create a XoaBondedNetwork resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public XoaBondedNetwork(string name, XoaBondedNetworkArgs args, CustomResourceOptions? options = null)
            : base("xenorchestra:index/xoaBondedNetwork:XoaBondedNetwork", name, args ?? new XoaBondedNetworkArgs(), MakeResourceOptions(options, ""))
        {
        }

        private XoaBondedNetwork(string name, Input<string> id, XoaBondedNetworkState? state = null, CustomResourceOptions? options = null)
            : base("xenorchestra:index/xoaBondedNetwork:XoaBondedNetwork", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/vatesfr/pulumi-xenorchestra",
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "xenorchestra:index/bondedNetwork:BondedNetwork" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing XoaBondedNetwork resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static XoaBondedNetwork Get(string name, Input<string> id, XoaBondedNetworkState? state = null, CustomResourceOptions? options = null)
        {
            return new XoaBondedNetwork(name, id, state, options);
        }
    }

    public sealed class XoaBondedNetworkArgs : global::Pulumi.ResourceArgs
    {
        [Input("automatic")]
        public Input<bool>? Automatic { get; set; }

        /// <summary>
        /// The bond mode that should be used for this network.
        /// </summary>
        [Input("bondMode")]
        public Input<string>? BondMode { get; set; }

        /// <summary>
        /// This argument controls whether the network should enforce VIF locking. This defaults to `false` which means that no filtering rules are applied.
        /// </summary>
        [Input("defaultIsLocked")]
        public Input<bool>? DefaultIsLocked { get; set; }

        /// <summary>
        /// The MTU of the network. Defaults to `1500` if unspecified.
        /// </summary>
        [Input("mtu")]
        public Input<int>? Mtu { get; set; }

        [Input("nameDescription")]
        public Input<string>? NameDescription { get; set; }

        /// <summary>
        /// The name label of the network.
        /// </summary>
        [Input("nameLabel", required: true)]
        public Input<string> NameLabel { get; set; } = null!;

        [Input("pifIds")]
        private InputList<string>? _pifIds;

        /// <summary>
        /// The PIFs (uuid) that should be used for this network.
        /// </summary>
        public InputList<string> PifIds
        {
            get => _pifIds ?? (_pifIds = new InputList<string>());
            set => _pifIds = value;
        }

        /// <summary>
        /// The pool id that this network should belong to.
        /// </summary>
        [Input("poolId", required: true)]
        public Input<string> PoolId { get; set; } = null!;

        public XoaBondedNetworkArgs()
        {
        }
        public static new XoaBondedNetworkArgs Empty => new XoaBondedNetworkArgs();
    }

    public sealed class XoaBondedNetworkState : global::Pulumi.ResourceArgs
    {
        [Input("automatic")]
        public Input<bool>? Automatic { get; set; }

        /// <summary>
        /// The bond mode that should be used for this network.
        /// </summary>
        [Input("bondMode")]
        public Input<string>? BondMode { get; set; }

        /// <summary>
        /// This argument controls whether the network should enforce VIF locking. This defaults to `false` which means that no filtering rules are applied.
        /// </summary>
        [Input("defaultIsLocked")]
        public Input<bool>? DefaultIsLocked { get; set; }

        /// <summary>
        /// The MTU of the network. Defaults to `1500` if unspecified.
        /// </summary>
        [Input("mtu")]
        public Input<int>? Mtu { get; set; }

        [Input("nameDescription")]
        public Input<string>? NameDescription { get; set; }

        /// <summary>
        /// The name label of the network.
        /// </summary>
        [Input("nameLabel")]
        public Input<string>? NameLabel { get; set; }

        [Input("pifIds")]
        private InputList<string>? _pifIds;

        /// <summary>
        /// The PIFs (uuid) that should be used for this network.
        /// </summary>
        public InputList<string> PifIds
        {
            get => _pifIds ?? (_pifIds = new InputList<string>());
            set => _pifIds = value;
        }

        /// <summary>
        /// The pool id that this network should belong to.
        /// </summary>
        [Input("poolId")]
        public Input<string>? PoolId { get; set; }

        public XoaBondedNetworkState()
        {
        }
        public static new XoaBondedNetworkState Empty => new XoaBondedNetworkState();
    }
}
