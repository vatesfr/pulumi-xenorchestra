// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Xenorchestra
{
    /// <summary>
    /// Creates a Xen Orchestra resource set.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Xenorchestra = Pulumi.Xenorchestra;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var template = Xenorchestra.GetXoaTemplate.Invoke(new()
    ///     {
    ///         NameLabel = "Ubuntu Bionic Beaver 18.04",
    ///     });
    /// 
    ///     var sr = Xenorchestra.GetXoaStorageRepository.Invoke(new()
    ///     {
    ///         NameLabel = "Your storage repository label",
    ///     });
    /// 
    ///     var eth0 = Xenorchestra.GetXoaPif.Invoke(new()
    ///     {
    ///         Device = "eth0",
    ///         Vlan = -1,
    ///     });
    /// 
    ///     var user = Xenorchestra.GetXoaUser.Invoke(new()
    ///     {
    ///         Username = "test_user",
    ///     });
    /// 
    ///     var rs = new Xenorchestra.ResourceSet("rs", new()
    ///     {
    ///         Name = "new-resource-set",
    ///         Subjects = new[]
    ///         {
    ///             user.Apply(getXoaUserResult =&gt; getXoaUserResult.Id),
    ///         },
    ///         Objects = new[]
    ///         {
    ///             template.Apply(getXoaTemplateResult =&gt; getXoaTemplateResult.Id),
    ///             sr.Apply(getXoaStorageRepositoryResult =&gt; getXoaStorageRepositoryResult.Id),
    ///             eth0.Apply(getXoaPifResult =&gt; getXoaPifResult.Network),
    ///         },
    ///         Limits = new[]
    ///         {
    ///             new Xenorchestra.Inputs.ResourceSetLimitArgs
    ///             {
    ///                 Type = "cpus",
    ///                 Quantity = 20,
    ///             },
    ///             new Xenorchestra.Inputs.ResourceSetLimitArgs
    ///             {
    ///                 Type = "disk",
    ///                 Quantity = 107374182400,
    ///             },
    ///             new Xenorchestra.Inputs.ResourceSetLimitArgs
    ///             {
    ///                 Type = "memory",
    ///                 Quantity = 12884901888,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ID can be found from the following command:
    /// 
    /// $ xo-cli resourceSet.getAll
    /// 
    /// ```sh
    /// $ pulumi import xenorchestra:index/resourceSet:ResourceSet rs MGSpuwnbtUE
    /// ```
    /// </summary>
    [XenorchestraResourceType("xenorchestra:index/resourceSet:ResourceSet")]
    public partial class ResourceSet : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The limit applied to the resource set.
        /// </summary>
        [Output("limits")]
        public Output<ImmutableArray<Outputs.ResourceSetLimit>> Limits { get; private set; } = null!;

        /// <summary>
        /// The name of the resource set.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The uuids of the objects that are within scope of the resource set. A minimum of a storage repository, network and VM template are required for users to launch VMs.
        /// </summary>
        [Output("objects")]
        public Output<ImmutableArray<string>> Objects { get; private set; } = null!;

        /// <summary>
        /// The uuids of the user accounts that should have access to the resource set.
        /// </summary>
        [Output("subjects")]
        public Output<ImmutableArray<string>> Subjects { get; private set; } = null!;


        /// <summary>
        /// Create a ResourceSet resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ResourceSet(string name, ResourceSetArgs args, CustomResourceOptions? options = null)
            : base("xenorchestra:index/resourceSet:ResourceSet", name, args ?? new ResourceSetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ResourceSet(string name, Input<string> id, ResourceSetState? state = null, CustomResourceOptions? options = null)
            : base("xenorchestra:index/resourceSet:ResourceSet", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/vatesfr/pulumi-xenorchestra",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ResourceSet resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ResourceSet Get(string name, Input<string> id, ResourceSetState? state = null, CustomResourceOptions? options = null)
        {
            return new ResourceSet(name, id, state, options);
        }
    }

    public sealed class ResourceSetArgs : global::Pulumi.ResourceArgs
    {
        [Input("limits", required: true)]
        private InputList<Inputs.ResourceSetLimitArgs>? _limits;

        /// <summary>
        /// The limit applied to the resource set.
        /// </summary>
        public InputList<Inputs.ResourceSetLimitArgs> Limits
        {
            get => _limits ?? (_limits = new InputList<Inputs.ResourceSetLimitArgs>());
            set => _limits = value;
        }

        /// <summary>
        /// The name of the resource set.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("objects")]
        private InputList<string>? _objects;

        /// <summary>
        /// The uuids of the objects that are within scope of the resource set. A minimum of a storage repository, network and VM template are required for users to launch VMs.
        /// </summary>
        public InputList<string> Objects
        {
            get => _objects ?? (_objects = new InputList<string>());
            set => _objects = value;
        }

        [Input("subjects")]
        private InputList<string>? _subjects;

        /// <summary>
        /// The uuids of the user accounts that should have access to the resource set.
        /// </summary>
        public InputList<string> Subjects
        {
            get => _subjects ?? (_subjects = new InputList<string>());
            set => _subjects = value;
        }

        public ResourceSetArgs()
        {
        }
        public static new ResourceSetArgs Empty => new ResourceSetArgs();
    }

    public sealed class ResourceSetState : global::Pulumi.ResourceArgs
    {
        [Input("limits")]
        private InputList<Inputs.ResourceSetLimitGetArgs>? _limits;

        /// <summary>
        /// The limit applied to the resource set.
        /// </summary>
        public InputList<Inputs.ResourceSetLimitGetArgs> Limits
        {
            get => _limits ?? (_limits = new InputList<Inputs.ResourceSetLimitGetArgs>());
            set => _limits = value;
        }

        /// <summary>
        /// The name of the resource set.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("objects")]
        private InputList<string>? _objects;

        /// <summary>
        /// The uuids of the objects that are within scope of the resource set. A minimum of a storage repository, network and VM template are required for users to launch VMs.
        /// </summary>
        public InputList<string> Objects
        {
            get => _objects ?? (_objects = new InputList<string>());
            set => _objects = value;
        }

        [Input("subjects")]
        private InputList<string>? _subjects;

        /// <summary>
        /// The uuids of the user accounts that should have access to the resource set.
        /// </summary>
        public InputList<string> Subjects
        {
            get => _subjects ?? (_subjects = new InputList<string>());
            set => _subjects = value;
        }

        public ResourceSetState()
        {
        }
        public static new ResourceSetState Empty => new ResourceSetState();
    }
}
