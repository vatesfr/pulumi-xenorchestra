// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Xenorchestra
{
    /// <summary>
    /// Creates a Xen Orchestra vdi resource.
    /// </summary>
    [XenorchestraResourceType("xenorchestra:index/vdi:Vdi")]
    public partial class Vdi : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The file path to the ISO or vdi image that should be uploaded when the VDI is created.
        /// </summary>
        [Output("filepath")]
        public Output<string> Filepath { get; private set; } = null!;

        /// <summary>
        /// The name label of the VDI
        /// </summary>
        [Output("nameLabel")]
        public Output<string> NameLabel { get; private set; } = null!;

        /// <summary>
        /// The id of the storage repository the VDI should be created in. Make sure the storage repository supports the file you are uploading! For example, ISOs should only be uploaded to ISO storage repositories.
        /// </summary>
        [Output("srId")]
        public Output<string> SrId { get; private set; } = null!;

        /// <summary>
        /// Only `raw` uploads are supported today, but vhd support may be added in the future.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Vdi resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Vdi(string name, VdiArgs args, CustomResourceOptions? options = null)
            : base("xenorchestra:index/vdi:Vdi", name, args ?? new VdiArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Vdi(string name, Input<string> id, VdiState? state = null, CustomResourceOptions? options = null)
            : base("xenorchestra:index/vdi:Vdi", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/vatesfr/pulumi-xenorchestra",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Vdi resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Vdi Get(string name, Input<string> id, VdiState? state = null, CustomResourceOptions? options = null)
        {
            return new Vdi(name, id, state, options);
        }
    }

    public sealed class VdiArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The file path to the ISO or vdi image that should be uploaded when the VDI is created.
        /// </summary>
        [Input("filepath", required: true)]
        public Input<string> Filepath { get; set; } = null!;

        /// <summary>
        /// The name label of the VDI
        /// </summary>
        [Input("nameLabel", required: true)]
        public Input<string> NameLabel { get; set; } = null!;

        /// <summary>
        /// The id of the storage repository the VDI should be created in. Make sure the storage repository supports the file you are uploading! For example, ISOs should only be uploaded to ISO storage repositories.
        /// </summary>
        [Input("srId", required: true)]
        public Input<string> SrId { get; set; } = null!;

        /// <summary>
        /// Only `raw` uploads are supported today, but vhd support may be added in the future.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public VdiArgs()
        {
        }
        public static new VdiArgs Empty => new VdiArgs();
    }

    public sealed class VdiState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The file path to the ISO or vdi image that should be uploaded when the VDI is created.
        /// </summary>
        [Input("filepath")]
        public Input<string>? Filepath { get; set; }

        /// <summary>
        /// The name label of the VDI
        /// </summary>
        [Input("nameLabel")]
        public Input<string>? NameLabel { get; set; }

        /// <summary>
        /// The id of the storage repository the VDI should be created in. Make sure the storage repository supports the file you are uploading! For example, ISOs should only be uploaded to ISO storage repositories.
        /// </summary>
        [Input("srId")]
        public Input<string>? SrId { get; set; }

        /// <summary>
        /// Only `raw` uploads are supported today, but vhd support may be added in the future.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public VdiState()
        {
        }
        public static new VdiState Empty => new VdiState();
    }
}
