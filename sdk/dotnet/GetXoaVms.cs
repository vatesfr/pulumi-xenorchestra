// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Xenorchestra
{
    public static class GetXoaVms
    {
        /// <summary>
        /// Use this data source to filter Xenorchestra VMs by certain criteria (pool_id, power_state or host) for use in other resources.
        /// </summary>
        public static Task<GetXoaVmsResult> InvokeAsync(GetXoaVmsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetXoaVmsResult>("xenorchestra:index/getXoaVms:getXoaVms", args ?? new GetXoaVmsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to filter Xenorchestra VMs by certain criteria (pool_id, power_state or host) for use in other resources.
        /// </summary>
        public static Output<GetXoaVmsResult> Invoke(GetXoaVmsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetXoaVmsResult>("xenorchestra:index/getXoaVms:getXoaVms", args ?? new GetXoaVmsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to filter Xenorchestra VMs by certain criteria (pool_id, power_state or host) for use in other resources.
        /// </summary>
        public static Output<GetXoaVmsResult> Invoke(GetXoaVmsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetXoaVmsResult>("xenorchestra:index/getXoaVms:getXoaVms", args ?? new GetXoaVmsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetXoaVmsArgs : global::Pulumi.InvokeArgs
    {
        [Input("host")]
        public string? Host { get; set; }

        /// <summary>
        /// The ID of the pool the VM belongs to.
        /// </summary>
        [Input("poolId", required: true)]
        public string PoolId { get; set; } = null!;

        /// <summary>
        /// The power state of the vms. (Running, Halted)
        /// </summary>
        [Input("powerState")]
        public string? PowerState { get; set; }

        public GetXoaVmsArgs()
        {
        }
        public static new GetXoaVmsArgs Empty => new GetXoaVmsArgs();
    }

    public sealed class GetXoaVmsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("host")]
        public Input<string>? Host { get; set; }

        /// <summary>
        /// The ID of the pool the VM belongs to.
        /// </summary>
        [Input("poolId", required: true)]
        public Input<string> PoolId { get; set; } = null!;

        /// <summary>
        /// The power state of the vms. (Running, Halted)
        /// </summary>
        [Input("powerState")]
        public Input<string>? PowerState { get; set; }

        public GetXoaVmsInvokeArgs()
        {
        }
        public static new GetXoaVmsInvokeArgs Empty => new GetXoaVmsInvokeArgs();
    }


    [OutputType]
    public sealed class GetXoaVmsResult
    {
        public readonly string? Host;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The ID of the pool the VM belongs to.
        /// </summary>
        public readonly string PoolId;
        /// <summary>
        /// The power state of the vms. (Running, Halted)
        /// </summary>
        public readonly string? PowerState;
        /// <summary>
        /// A list of information for all vms found in this pool.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetXoaVmsVmResult> Vms;

        [OutputConstructor]
        private GetXoaVmsResult(
            string? host,

            string id,

            string poolId,

            string? powerState,

            ImmutableArray<Outputs.GetXoaVmsVmResult> vms)
        {
            Host = host;
            Id = id;
            PoolId = poolId;
            PowerState = powerState;
            Vms = vms;
        }
    }
}
