// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Immutable;

namespace Pulumi.Xenorchestra
{
    public static class Config
    {
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "IDE1006", Justification = 
        "Double underscore prefix used to avoid conflicts with variable names.")]
        private sealed class __Value<T>
        {
            private readonly Func<T> _getter;
            private T _value = default!;
            private bool _set;

            public __Value(Func<T> getter)
            {
                _getter = getter;
            }

            public T Get() => _set ? _value : _getter();

            public void Set(T value)
            {
                _value = value;
                _set = true;
            }
        }

        private static readonly global::Pulumi.Config __config = new global::Pulumi.Config("xenorchestra");

        private static readonly __Value<bool?> _insecure = new __Value<bool?>(() => __config.GetBoolean("insecure"));
        /// <summary>
        /// Whether SSL should be verified or not. Can be set via the XOA_INSECURE environment variable.
        /// </summary>
        public static bool? Insecure
        {
            get => _insecure.Get();
            set => _insecure.Set(value);
        }

        private static readonly __Value<string?> _password = new __Value<string?>(() => __config.Get("password"));
        /// <summary>
        /// Password for xoa api. Can be set via the XOA_PASSWORD environment variable.
        /// </summary>
        public static string? Password
        {
            get => _password.Get();
            set => _password.Set(value);
        }

        private static readonly __Value<string?> _retryMaxTime = new __Value<string?>(() => __config.Get("retryMaxTime"));
        /// <summary>
        /// If `retry_mode` is set, this specifies the duration for which the backoff method will continue retries. Can be set via
        /// the `XOA_RETRY_MAX_TIME` environment variable
        /// </summary>
        public static string? RetryMaxTime
        {
            get => _retryMaxTime.Get();
            set => _retryMaxTime.Set(value);
        }

        private static readonly __Value<string?> _retryMode = new __Value<string?>(() => __config.Get("retryMode"));
        /// <summary>
        /// Specifies if retries should be attempted for requests that require eventual . Can be set via the XOA_RETRY_MODE
        /// environment variable.
        /// </summary>
        public static string? RetryMode
        {
            get => _retryMode.Get();
            set => _retryMode.Set(value);
        }

        private static readonly __Value<string?> _token = new __Value<string?>(() => __config.Get("token"));
        /// <summary>
        /// Password for xoa api. Can be set via the XOA_TOKEN environment variable.
        /// </summary>
        public static string? Token
        {
            get => _token.Get();
            set => _token.Set(value);
        }

        private static readonly __Value<string?> _url = new __Value<string?>(() => __config.Get("url"));
        /// <summary>
        /// Hostname of the xoa router. Can be set via the XOA_URL environment variable.
        /// </summary>
        public static string? Url
        {
            get => _url.Get();
            set => _url.Set(value);
        }

        private static readonly __Value<string?> _username = new __Value<string?>(() => __config.Get("username"));
        /// <summary>
        /// User account for xoa api. Can be set via the XOA_USER environment variable.
        /// </summary>
        public static string? Username
        {
            get => _username.Get();
            set => _username.Set(value);
        }

    }
}
