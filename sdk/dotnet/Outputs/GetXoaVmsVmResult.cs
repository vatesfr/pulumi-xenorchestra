// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Xenorchestra.Outputs
{

    [OutputType]
    public sealed class GetXoaVmsVmResult
    {
        /// <summary>
        /// The preferred host you would like the VM to run on. If changed on an existing VM it will require a reboot for the VM to be rescheduled.
        /// </summary>
        public readonly string? AffinityHost;
        /// <summary>
        /// If the VM will automatically turn on. Defaults to `false`.
        /// </summary>
        public readonly bool? AutoPoweron;
        /// <summary>
        /// List of operations on a VM that are not permitted. Examples include: clean_reboot, clean_shutdown, hard_reboot, hard_shutdown, pause, shutdown, suspend, destroy. See: https://xapi-project.github.io/xen-api/classes/vm.html#enum_vm_operations
        /// </summary>
        public readonly ImmutableArray<string> BlockedOperations;
        /// <summary>
        /// The type of clone to perform for the VM. Possible values include `fast` or `full` and defaults to `fast`. In order to perform a `full` clone, the VM template must not be a disk template.
        /// </summary>
        public readonly string? CloneType;
        /// <summary>
        /// The content of the cloud-init config to use. See the cloud init docs for more [information](https://cloudinit.readthedocs.io/en/latest/topics/examples.html).
        /// </summary>
        public readonly string? CloudConfig;
        /// <summary>
        /// The content of the cloud-init network configuration for the VM (uses [version 1](https://cloudinit.readthedocs.io/en/latest/topics/network-config-format-v1.html))
        /// </summary>
        public readonly string? CloudNetworkConfig;
        public readonly bool? CoreOs;
        public readonly int? CpuCap;
        public readonly int? CpuWeight;
        /// <summary>
        /// The number of CPUs the VM will have. Updates to this field will cause a stop and start of the VM if the new CPU value is greater than the max CPU value. This can be determined with the following command:
        /// ```
        /// 
        /// $ xo-cli xo.getAllObjects filter='json:{"id": "cf7b5d7d-3cd5-6b7c-5025-5c935c8cd0b8"}' | jq '.[].CPUs'
        /// {
        ///   "max": 4,
        ///   "number": 2
        /// }
        /// 
        /// # Updating the VM to use 3 CPUs would happen without stopping/starting the VM
        /// # Updating the VM to use 5 CPUs would stop/start the VM
        /// ```
        /// </summary>
        public readonly int Cpus;
        /// <summary>
        /// The disk the VM will have access to.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetXoaVmsVmDiskResult> Disks;
        /// <summary>
        /// Boolean parameter that allows a VM to use nested virtualization.
        /// </summary>
        public readonly bool? ExpNestedHvm;
        /// <summary>
        /// The restart priority for the VM. Possible values are `best-effort`, `restart` and empty string (no restarts on failure. Defaults to empty string
        /// </summary>
        public readonly string? HighAvailability;
        public readonly string? Host;
        /// <summary>
        /// The firmware to use for the VM. Possible values are `bios` and `uefi`.
        /// </summary>
        public readonly string? HvmBootFirmware;
        public readonly string Id;
        public readonly ImmutableArray<string> Ipv4Addresses;
        /// <summary>
        /// This is only accessible if guest-tools is installed in the VM. While the output contains a list of ipv6 addresses, the presence of an IP address is only guaranteed if `expected_ip_cidr` is set for that interface. The list contains the ipv6 addresses across all network interfaces in order.
        /// </summary>
        public readonly ImmutableArray<string> Ipv6Addresses;
        /// <summary>
        /// The amount of memory in bytes the VM will have.\n\n!!! WARNING: Updates to this field will cause the VM to stop and start, as it sets both dynamic and static maximums.
        /// </summary>
        public readonly int MemoryMax;
        /// <summary>
        /// The amount of memory in bytes the VM will have. Set this value equal to memory_max to have a static memory.
        /// </summary>
        public readonly int MemoryMin;
        /// <summary>
        /// The description of the VM.
        /// </summary>
        public readonly string? NameDescription;
        /// <summary>
        /// The name of the VM.
        /// </summary>
        public readonly string NameLabel;
        /// <summary>
        /// The network for the VM.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetXoaVmsVmNetworkResult> Networks;
        /// <summary>
        /// The power state of the VM. This can be Running, Halted, Paused or Suspended.
        /// </summary>
        public readonly string? PowerState;
        public readonly string? ResourceSet;
        /// <summary>
        /// Number of seconds the VM should be delayed from starting.
        /// </summary>
        public readonly int? StartDelay;
        /// <summary>
        /// The tags (labels) applied to the given entity.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// The ID of the VM template to create the new VM from.
        /// </summary>
        public readonly string Template;
        /// <summary>
        /// The video adapter the VM should use. Possible values include std and cirrus.
        /// </summary>
        public readonly string? Vga;
        /// <summary>
        /// The videoram option the VM should use. Possible values include 1, 2, 4, 8, 16
        /// </summary>
        public readonly int? Videoram;
        /// <summary>
        /// The key value pairs to be populated in xenstore.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Xenstore;

        [OutputConstructor]
        private GetXoaVmsVmResult(
            string? affinityHost,

            bool? autoPoweron,

            ImmutableArray<string> blockedOperations,

            string? cloneType,

            string? cloudConfig,

            string? cloudNetworkConfig,

            bool? coreOs,

            int? cpuCap,

            int? cpuWeight,

            int cpus,

            ImmutableArray<Outputs.GetXoaVmsVmDiskResult> disks,

            bool? expNestedHvm,

            string? highAvailability,

            string? host,

            string? hvmBootFirmware,

            string id,

            ImmutableArray<string> ipv4Addresses,

            ImmutableArray<string> ipv6Addresses,

            int memoryMax,

            int memoryMin,

            string? nameDescription,

            string nameLabel,

            ImmutableArray<Outputs.GetXoaVmsVmNetworkResult> networks,

            string? powerState,

            string? resourceSet,

            int? startDelay,

            ImmutableArray<string> tags,

            string template,

            string? vga,

            int? videoram,

            ImmutableDictionary<string, string>? xenstore)
        {
            AffinityHost = affinityHost;
            AutoPoweron = autoPoweron;
            BlockedOperations = blockedOperations;
            CloneType = cloneType;
            CloudConfig = cloudConfig;
            CloudNetworkConfig = cloudNetworkConfig;
            CoreOs = coreOs;
            CpuCap = cpuCap;
            CpuWeight = cpuWeight;
            Cpus = cpus;
            Disks = disks;
            ExpNestedHvm = expNestedHvm;
            HighAvailability = highAvailability;
            Host = host;
            HvmBootFirmware = hvmBootFirmware;
            Id = id;
            Ipv4Addresses = ipv4Addresses;
            Ipv6Addresses = ipv6Addresses;
            MemoryMax = memoryMax;
            MemoryMin = memoryMin;
            NameDescription = nameDescription;
            NameLabel = nameLabel;
            Networks = networks;
            PowerState = powerState;
            ResourceSet = resourceSet;
            StartDelay = startDelay;
            Tags = tags;
            Template = template;
            Vga = vga;
            Videoram = videoram;
            Xenstore = xenstore;
        }
    }
}
