// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Xenorchestra
{
    public static class GetXoaPool
    {
        /// <summary>
        /// Provides information about a pool.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Xenorchestra = Pulumi.Xenorchestra;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var pool = Xenorchestra.GetXoaPool.Invoke(new()
        ///     {
        ///         NameLabel = "Your pool",
        ///     });
        /// 
        ///     var localStorage = Xenorchestra.GetXoaStorageRepository.Invoke(new()
        ///     {
        ///         NameLabel = "Your storage repository label",
        ///         PoolId = pool.Apply(getXoaPoolResult =&gt; getXoaPoolResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetXoaPoolResult> InvokeAsync(GetXoaPoolArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetXoaPoolResult>("xenorchestra:index/getXoaPool:getXoaPool", args ?? new GetXoaPoolArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about a pool.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Xenorchestra = Pulumi.Xenorchestra;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var pool = Xenorchestra.GetXoaPool.Invoke(new()
        ///     {
        ///         NameLabel = "Your pool",
        ///     });
        /// 
        ///     var localStorage = Xenorchestra.GetXoaStorageRepository.Invoke(new()
        ///     {
        ///         NameLabel = "Your storage repository label",
        ///         PoolId = pool.Apply(getXoaPoolResult =&gt; getXoaPoolResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetXoaPoolResult> Invoke(GetXoaPoolInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetXoaPoolResult>("xenorchestra:index/getXoaPool:getXoaPool", args ?? new GetXoaPoolInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about a pool.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Xenorchestra = Pulumi.Xenorchestra;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var pool = Xenorchestra.GetXoaPool.Invoke(new()
        ///     {
        ///         NameLabel = "Your pool",
        ///     });
        /// 
        ///     var localStorage = Xenorchestra.GetXoaStorageRepository.Invoke(new()
        ///     {
        ///         NameLabel = "Your storage repository label",
        ///         PoolId = pool.Apply(getXoaPoolResult =&gt; getXoaPoolResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetXoaPoolResult> Invoke(GetXoaPoolInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetXoaPoolResult>("xenorchestra:index/getXoaPool:getXoaPool", args ?? new GetXoaPoolInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetXoaPoolArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name_label of the pool to look up.
        /// </summary>
        [Input("nameLabel", required: true)]
        public string NameLabel { get; set; } = null!;

        public GetXoaPoolArgs()
        {
        }
        public static new GetXoaPoolArgs Empty => new GetXoaPoolArgs();
    }

    public sealed class GetXoaPoolInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name_label of the pool to look up.
        /// </summary>
        [Input("nameLabel", required: true)]
        public Input<string> NameLabel { get; set; } = null!;

        public GetXoaPoolInvokeArgs()
        {
        }
        public static new GetXoaPoolInvokeArgs Empty => new GetXoaPoolInvokeArgs();
    }


    [OutputType]
    public sealed class GetXoaPoolResult
    {
        /// <summary>
        /// CPU information about the pool. The 'cores' key will contain the number of cpu cores and the 'sockets' key will contain the number of sockets.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Cpus;
        /// <summary>
        /// The description of the pool.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The id of the primary instance in the pool.
        /// </summary>
        public readonly string Master;
        /// <summary>
        /// The name_label of the pool to look up.
        /// </summary>
        public readonly string NameLabel;

        [OutputConstructor]
        private GetXoaPoolResult(
            ImmutableDictionary<string, string> cpus,

            string description,

            string id,

            string master,

            string nameLabel)
        {
            Cpus = cpus;
            Description = description;
            Id = id;
            Master = master;
            NameLabel = nameLabel;
        }
    }
}
