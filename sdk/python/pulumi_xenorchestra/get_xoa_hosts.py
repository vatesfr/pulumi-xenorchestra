# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetXoaHostsResult',
    'AwaitableGetXoaHostsResult',
    'get_xoa_hosts',
    'get_xoa_hosts_output',
]

@pulumi.output_type
class GetXoaHostsResult:
    """
    A collection of values returned by getXoaHosts.
    """
    def __init__(__self__, hosts=None, id=None, master=None, pool_id=None, sort_by=None, sort_order=None, tags=None):
        if hosts and not isinstance(hosts, list):
            raise TypeError("Expected argument 'hosts' to be a list")
        pulumi.set(__self__, "hosts", hosts)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if master and not isinstance(master, str):
            raise TypeError("Expected argument 'master' to be a str")
        pulumi.set(__self__, "master", master)
        if pool_id and not isinstance(pool_id, str):
            raise TypeError("Expected argument 'pool_id' to be a str")
        pulumi.set(__self__, "pool_id", pool_id)
        if sort_by and not isinstance(sort_by, str):
            raise TypeError("Expected argument 'sort_by' to be a str")
        pulumi.set(__self__, "sort_by", sort_by)
        if sort_order and not isinstance(sort_order, str):
            raise TypeError("Expected argument 'sort_order' to be a str")
        pulumi.set(__self__, "sort_order", sort_order)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter
    def hosts(self) -> Sequence['outputs.GetXoaHostsHostResult']:
        """
        The resulting hosts after applying the argument filtering.
        """
        return pulumi.get(self, "hosts")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def master(self) -> _builtins.str:
        """
        The primary host of the pool.
        """
        return pulumi.get(self, "master")

    @_builtins.property
    @pulumi.getter(name="poolId")
    def pool_id(self) -> _builtins.str:
        """
        The pool id used to filter the resulting hosts by.
        """
        return pulumi.get(self, "pool_id")

    @_builtins.property
    @pulumi.getter(name="sortBy")
    def sort_by(self) -> Optional[_builtins.str]:
        """
        The host field to sort the results by (id and name_label are supported).
        """
        return pulumi.get(self, "sort_by")

    @_builtins.property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> Optional[_builtins.str]:
        """
        Valid options are `asc` or `desc` and sort order is applied to `sort_by` argument.
        """
        return pulumi.get(self, "sort_order")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[_builtins.str]]:
        """
        The tags (labels) applied to the given entity.
        """
        return pulumi.get(self, "tags")


class AwaitableGetXoaHostsResult(GetXoaHostsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetXoaHostsResult(
            hosts=self.hosts,
            id=self.id,
            master=self.master,
            pool_id=self.pool_id,
            sort_by=self.sort_by,
            sort_order=self.sort_order,
            tags=self.tags)


def get_xoa_hosts(pool_id: Optional[_builtins.str] = None,
                  sort_by: Optional[_builtins.str] = None,
                  sort_order: Optional[_builtins.str] = None,
                  tags: Optional[Sequence[_builtins.str]] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetXoaHostsResult:
    """
    Use this data source to filter Xenorchestra hosts by certain criteria (name_label, tags) for use in other resources.


    :param _builtins.str pool_id: The pool id used to filter the resulting hosts by.
    :param _builtins.str sort_by: The host field to sort the results by (id and name_label are supported).
    :param _builtins.str sort_order: Valid options are `asc` or `desc` and sort order is applied to `sort_by` argument.
    :param Sequence[_builtins.str] tags: The tags (labels) applied to the given entity.
    """
    __args__ = dict()
    __args__['poolId'] = pool_id
    __args__['sortBy'] = sort_by
    __args__['sortOrder'] = sort_order
    __args__['tags'] = tags
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('xenorchestra:index/getXoaHosts:getXoaHosts', __args__, opts=opts, typ=GetXoaHostsResult).value

    return AwaitableGetXoaHostsResult(
        hosts=pulumi.get(__ret__, 'hosts'),
        id=pulumi.get(__ret__, 'id'),
        master=pulumi.get(__ret__, 'master'),
        pool_id=pulumi.get(__ret__, 'pool_id'),
        sort_by=pulumi.get(__ret__, 'sort_by'),
        sort_order=pulumi.get(__ret__, 'sort_order'),
        tags=pulumi.get(__ret__, 'tags'))
def get_xoa_hosts_output(pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                         sort_by: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         sort_order: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         tags: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetXoaHostsResult]:
    """
    Use this data source to filter Xenorchestra hosts by certain criteria (name_label, tags) for use in other resources.


    :param _builtins.str pool_id: The pool id used to filter the resulting hosts by.
    :param _builtins.str sort_by: The host field to sort the results by (id and name_label are supported).
    :param _builtins.str sort_order: Valid options are `asc` or `desc` and sort order is applied to `sort_by` argument.
    :param Sequence[_builtins.str] tags: The tags (labels) applied to the given entity.
    """
    __args__ = dict()
    __args__['poolId'] = pool_id
    __args__['sortBy'] = sort_by
    __args__['sortOrder'] = sort_order
    __args__['tags'] = tags
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('xenorchestra:index/getXoaHosts:getXoaHosts', __args__, opts=opts, typ=GetXoaHostsResult)
    return __ret__.apply(lambda __response__: GetXoaHostsResult(
        hosts=pulumi.get(__response__, 'hosts'),
        id=pulumi.get(__response__, 'id'),
        master=pulumi.get(__response__, 'master'),
        pool_id=pulumi.get(__response__, 'pool_id'),
        sort_by=pulumi.get(__response__, 'sort_by'),
        sort_order=pulumi.get(__response__, 'sort_order'),
        tags=pulumi.get(__response__, 'tags')))
