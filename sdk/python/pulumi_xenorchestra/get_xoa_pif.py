# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetXoaPifResult',
    'AwaitableGetXoaPifResult',
    'get_xoa_pif',
    'get_xoa_pif_output',
]

@pulumi.output_type
class GetXoaPifResult:
    """
    A collection of values returned by getXoaPif.
    """
    def __init__(__self__, attached=None, bond_master=None, bond_slaves=None, device=None, host=None, host_id=None, id=None, is_bond_master=None, is_bond_slave=None, network=None, pool_id=None, uuid=None, vlan=None):
        if attached and not isinstance(attached, bool):
            raise TypeError("Expected argument 'attached' to be a bool")
        pulumi.set(__self__, "attached", attached)
        if bond_master and not isinstance(bond_master, str):
            raise TypeError("Expected argument 'bond_master' to be a str")
        pulumi.set(__self__, "bond_master", bond_master)
        if bond_slaves and not isinstance(bond_slaves, list):
            raise TypeError("Expected argument 'bond_slaves' to be a list")
        pulumi.set(__self__, "bond_slaves", bond_slaves)
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if host and not isinstance(host, str):
            raise TypeError("Expected argument 'host' to be a str")
        pulumi.set(__self__, "host", host)
        if host_id and not isinstance(host_id, str):
            raise TypeError("Expected argument 'host_id' to be a str")
        pulumi.set(__self__, "host_id", host_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_bond_master and not isinstance(is_bond_master, bool):
            raise TypeError("Expected argument 'is_bond_master' to be a bool")
        pulumi.set(__self__, "is_bond_master", is_bond_master)
        if is_bond_slave and not isinstance(is_bond_slave, bool):
            raise TypeError("Expected argument 'is_bond_slave' to be a bool")
        pulumi.set(__self__, "is_bond_slave", is_bond_slave)
        if network and not isinstance(network, str):
            raise TypeError("Expected argument 'network' to be a str")
        pulumi.set(__self__, "network", network)
        if pool_id and not isinstance(pool_id, str):
            raise TypeError("Expected argument 'pool_id' to be a str")
        pulumi.set(__self__, "pool_id", pool_id)
        if uuid and not isinstance(uuid, str):
            raise TypeError("Expected argument 'uuid' to be a str")
        pulumi.set(__self__, "uuid", uuid)
        if vlan and not isinstance(vlan, int):
            raise TypeError("Expected argument 'vlan' to be a int")
        pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def attached(self) -> builtins.bool:
        """
        If the PIF is attached to the network.
        """
        return pulumi.get(self, "attached")

    @property
    @pulumi.getter(name="bondMaster")
    def bond_master(self) -> builtins.str:
        """
        In case of a bond slave, the uuid of the bond master.
        """
        return pulumi.get(self, "bond_master")

    @property
    @pulumi.getter(name="bondSlaves")
    def bond_slaves(self) -> Sequence[builtins.str]:
        """
        In case of a bond master, the PIFs (uuid) that are used for this bond.
        """
        return pulumi.get(self, "bond_slaves")

    @property
    @pulumi.getter
    def device(self) -> builtins.str:
        """
        The name of the network device. Examples include eth0, eth1, etc. See `ifconfig` for possible devices.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def host(self) -> builtins.str:
        """
        The host the PIF is associated with.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="hostId")
    def host_id(self) -> builtins.str:
        """
        The ID of the host that the PIF belongs to.
        """
        return pulumi.get(self, "host_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isBondMaster")
    def is_bond_master(self) -> builtins.bool:
        """
        True if this PIF is a bond master.
        """
        return pulumi.get(self, "is_bond_master")

    @property
    @pulumi.getter(name="isBondSlave")
    def is_bond_slave(self) -> builtins.bool:
        """
        True if this PIF is a bond slave.
        """
        return pulumi.get(self, "is_bond_slave")

    @property
    @pulumi.getter
    def network(self) -> builtins.str:
        """
        The network the PIF is associated with.
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="poolId")
    def pool_id(self) -> builtins.str:
        """
        The pool the PIF is associated with.
        """
        return pulumi.get(self, "pool_id")

    @property
    @pulumi.getter
    def uuid(self) -> builtins.str:
        """
        The uuid of the PIF.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def vlan(self) -> builtins.int:
        """
        The VLAN the PIF belongs to.
        """
        return pulumi.get(self, "vlan")


class AwaitableGetXoaPifResult(GetXoaPifResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetXoaPifResult(
            attached=self.attached,
            bond_master=self.bond_master,
            bond_slaves=self.bond_slaves,
            device=self.device,
            host=self.host,
            host_id=self.host_id,
            id=self.id,
            is_bond_master=self.is_bond_master,
            is_bond_slave=self.is_bond_slave,
            network=self.network,
            pool_id=self.pool_id,
            uuid=self.uuid,
            vlan=self.vlan)


def get_xoa_pif(device: Optional[builtins.str] = None,
                host_id: Optional[builtins.str] = None,
                vlan: Optional[builtins.int] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetXoaPifResult:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_xenorchestra as xenorchestra

    eth0 = xenorchestra.get_xoa_pif(device="eth0",
        vlan=-1)
    demo_vm = xenorchestra.Vm("demo-vm", networks=[{
        "network_id": eth0.network,
    }])
    ```


    :param builtins.str device: The name of the network device. Examples include eth0, eth1, etc. See `ifconfig` for possible devices.
    :param builtins.str host_id: The ID of the host that the PIF belongs to.
    :param builtins.int vlan: The VLAN the PIF belongs to.
    """
    __args__ = dict()
    __args__['device'] = device
    __args__['hostId'] = host_id
    __args__['vlan'] = vlan
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('xenorchestra:index/getXoaPif:getXoaPif', __args__, opts=opts, typ=GetXoaPifResult).value

    return AwaitableGetXoaPifResult(
        attached=pulumi.get(__ret__, 'attached'),
        bond_master=pulumi.get(__ret__, 'bond_master'),
        bond_slaves=pulumi.get(__ret__, 'bond_slaves'),
        device=pulumi.get(__ret__, 'device'),
        host=pulumi.get(__ret__, 'host'),
        host_id=pulumi.get(__ret__, 'host_id'),
        id=pulumi.get(__ret__, 'id'),
        is_bond_master=pulumi.get(__ret__, 'is_bond_master'),
        is_bond_slave=pulumi.get(__ret__, 'is_bond_slave'),
        network=pulumi.get(__ret__, 'network'),
        pool_id=pulumi.get(__ret__, 'pool_id'),
        uuid=pulumi.get(__ret__, 'uuid'),
        vlan=pulumi.get(__ret__, 'vlan'))
def get_xoa_pif_output(device: Optional[pulumi.Input[builtins.str]] = None,
                       host_id: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                       vlan: Optional[pulumi.Input[builtins.int]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetXoaPifResult]:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_xenorchestra as xenorchestra

    eth0 = xenorchestra.get_xoa_pif(device="eth0",
        vlan=-1)
    demo_vm = xenorchestra.Vm("demo-vm", networks=[{
        "network_id": eth0.network,
    }])
    ```


    :param builtins.str device: The name of the network device. Examples include eth0, eth1, etc. See `ifconfig` for possible devices.
    :param builtins.str host_id: The ID of the host that the PIF belongs to.
    :param builtins.int vlan: The VLAN the PIF belongs to.
    """
    __args__ = dict()
    __args__['device'] = device
    __args__['hostId'] = host_id
    __args__['vlan'] = vlan
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('xenorchestra:index/getXoaPif:getXoaPif', __args__, opts=opts, typ=GetXoaPifResult)
    return __ret__.apply(lambda __response__: GetXoaPifResult(
        attached=pulumi.get(__response__, 'attached'),
        bond_master=pulumi.get(__response__, 'bond_master'),
        bond_slaves=pulumi.get(__response__, 'bond_slaves'),
        device=pulumi.get(__response__, 'device'),
        host=pulumi.get(__response__, 'host'),
        host_id=pulumi.get(__response__, 'host_id'),
        id=pulumi.get(__response__, 'id'),
        is_bond_master=pulumi.get(__response__, 'is_bond_master'),
        is_bond_slave=pulumi.get(__response__, 'is_bond_slave'),
        network=pulumi.get(__response__, 'network'),
        pool_id=pulumi.get(__response__, 'pool_id'),
        uuid=pulumi.get(__response__, 'uuid'),
        vlan=pulumi.get(__response__, 'vlan')))
