# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['XoaNetworkArgs', 'XoaNetwork']

@pulumi.input_type
class XoaNetworkArgs:
    def __init__(__self__, *,
                 name_label: pulumi.Input[_builtins.str],
                 pool_id: pulumi.Input[_builtins.str],
                 automatic: Optional[pulumi.Input[_builtins.bool]] = None,
                 default_is_locked: Optional[pulumi.Input[_builtins.bool]] = None,
                 mtu: Optional[pulumi.Input[_builtins.int]] = None,
                 name_description: Optional[pulumi.Input[_builtins.str]] = None,
                 nbd: Optional[pulumi.Input[_builtins.bool]] = None,
                 source_pif_device: Optional[pulumi.Input[_builtins.str]] = None,
                 vlan: Optional[pulumi.Input[_builtins.int]] = None):
        """
        The set of arguments for constructing a XoaNetwork resource.
        :param pulumi.Input[_builtins.str] name_label: The name label of the network.
        :param pulumi.Input[_builtins.str] pool_id: The pool id that this network should belong to.
        :param pulumi.Input[_builtins.bool] default_is_locked: This argument controls whether the network should enforce VIF locking. This defaults to `false` which means that no filtering rules are applied.
        :param pulumi.Input[_builtins.int] mtu: The MTU of the network. Defaults to `1500` if unspecified.
        :param pulumi.Input[_builtins.bool] nbd: Whether the network should use a network block device. Defaults to `false` if unspecified.
        :param pulumi.Input[_builtins.str] source_pif_device: The PIF device (eth0, eth1, etc) that will be used as an input during network creation. This parameter is required if a vlan is specified.
        :param pulumi.Input[_builtins.int] vlan: The vlan to use for the network. Defaults to `0` meaning no VLAN.
        """
        pulumi.set(__self__, "name_label", name_label)
        pulumi.set(__self__, "pool_id", pool_id)
        if automatic is not None:
            pulumi.set(__self__, "automatic", automatic)
        if default_is_locked is not None:
            pulumi.set(__self__, "default_is_locked", default_is_locked)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if name_description is not None:
            pulumi.set(__self__, "name_description", name_description)
        if nbd is not None:
            pulumi.set(__self__, "nbd", nbd)
        if source_pif_device is not None:
            pulumi.set(__self__, "source_pif_device", source_pif_device)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @_builtins.property
    @pulumi.getter(name="nameLabel")
    def name_label(self) -> pulumi.Input[_builtins.str]:
        """
        The name label of the network.
        """
        return pulumi.get(self, "name_label")

    @name_label.setter
    def name_label(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name_label", value)

    @_builtins.property
    @pulumi.getter(name="poolId")
    def pool_id(self) -> pulumi.Input[_builtins.str]:
        """
        The pool id that this network should belong to.
        """
        return pulumi.get(self, "pool_id")

    @pool_id.setter
    def pool_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pool_id", value)

    @_builtins.property
    @pulumi.getter
    def automatic(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "automatic")

    @automatic.setter
    def automatic(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "automatic", value)

    @_builtins.property
    @pulumi.getter(name="defaultIsLocked")
    def default_is_locked(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        This argument controls whether the network should enforce VIF locking. This defaults to `false` which means that no filtering rules are applied.
        """
        return pulumi.get(self, "default_is_locked")

    @default_is_locked.setter
    def default_is_locked(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "default_is_locked", value)

    @_builtins.property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The MTU of the network. Defaults to `1500` if unspecified.
        """
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "mtu", value)

    @_builtins.property
    @pulumi.getter(name="nameDescription")
    def name_description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name_description")

    @name_description.setter
    def name_description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name_description", value)

    @_builtins.property
    @pulumi.getter
    def nbd(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the network should use a network block device. Defaults to `false` if unspecified.
        """
        return pulumi.get(self, "nbd")

    @nbd.setter
    def nbd(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "nbd", value)

    @_builtins.property
    @pulumi.getter(name="sourcePifDevice")
    def source_pif_device(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The PIF device (eth0, eth1, etc) that will be used as an input during network creation. This parameter is required if a vlan is specified.
        """
        return pulumi.get(self, "source_pif_device")

    @source_pif_device.setter
    def source_pif_device(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_pif_device", value)

    @_builtins.property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The vlan to use for the network. Defaults to `0` meaning no VLAN.
        """
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "vlan", value)


@pulumi.input_type
class _XoaNetworkState:
    def __init__(__self__, *,
                 automatic: Optional[pulumi.Input[_builtins.bool]] = None,
                 default_is_locked: Optional[pulumi.Input[_builtins.bool]] = None,
                 mtu: Optional[pulumi.Input[_builtins.int]] = None,
                 name_description: Optional[pulumi.Input[_builtins.str]] = None,
                 name_label: Optional[pulumi.Input[_builtins.str]] = None,
                 nbd: Optional[pulumi.Input[_builtins.bool]] = None,
                 pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_pif_device: Optional[pulumi.Input[_builtins.str]] = None,
                 vlan: Optional[pulumi.Input[_builtins.int]] = None):
        """
        Input properties used for looking up and filtering XoaNetwork resources.
        :param pulumi.Input[_builtins.bool] default_is_locked: This argument controls whether the network should enforce VIF locking. This defaults to `false` which means that no filtering rules are applied.
        :param pulumi.Input[_builtins.int] mtu: The MTU of the network. Defaults to `1500` if unspecified.
        :param pulumi.Input[_builtins.str] name_label: The name label of the network.
        :param pulumi.Input[_builtins.bool] nbd: Whether the network should use a network block device. Defaults to `false` if unspecified.
        :param pulumi.Input[_builtins.str] pool_id: The pool id that this network should belong to.
        :param pulumi.Input[_builtins.str] source_pif_device: The PIF device (eth0, eth1, etc) that will be used as an input during network creation. This parameter is required if a vlan is specified.
        :param pulumi.Input[_builtins.int] vlan: The vlan to use for the network. Defaults to `0` meaning no VLAN.
        """
        if automatic is not None:
            pulumi.set(__self__, "automatic", automatic)
        if default_is_locked is not None:
            pulumi.set(__self__, "default_is_locked", default_is_locked)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if name_description is not None:
            pulumi.set(__self__, "name_description", name_description)
        if name_label is not None:
            pulumi.set(__self__, "name_label", name_label)
        if nbd is not None:
            pulumi.set(__self__, "nbd", nbd)
        if pool_id is not None:
            pulumi.set(__self__, "pool_id", pool_id)
        if source_pif_device is not None:
            pulumi.set(__self__, "source_pif_device", source_pif_device)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @_builtins.property
    @pulumi.getter
    def automatic(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "automatic")

    @automatic.setter
    def automatic(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "automatic", value)

    @_builtins.property
    @pulumi.getter(name="defaultIsLocked")
    def default_is_locked(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        This argument controls whether the network should enforce VIF locking. This defaults to `false` which means that no filtering rules are applied.
        """
        return pulumi.get(self, "default_is_locked")

    @default_is_locked.setter
    def default_is_locked(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "default_is_locked", value)

    @_builtins.property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The MTU of the network. Defaults to `1500` if unspecified.
        """
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "mtu", value)

    @_builtins.property
    @pulumi.getter(name="nameDescription")
    def name_description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name_description")

    @name_description.setter
    def name_description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name_description", value)

    @_builtins.property
    @pulumi.getter(name="nameLabel")
    def name_label(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name label of the network.
        """
        return pulumi.get(self, "name_label")

    @name_label.setter
    def name_label(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name_label", value)

    @_builtins.property
    @pulumi.getter
    def nbd(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the network should use a network block device. Defaults to `false` if unspecified.
        """
        return pulumi.get(self, "nbd")

    @nbd.setter
    def nbd(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "nbd", value)

    @_builtins.property
    @pulumi.getter(name="poolId")
    def pool_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The pool id that this network should belong to.
        """
        return pulumi.get(self, "pool_id")

    @pool_id.setter
    def pool_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pool_id", value)

    @_builtins.property
    @pulumi.getter(name="sourcePifDevice")
    def source_pif_device(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The PIF device (eth0, eth1, etc) that will be used as an input during network creation. This parameter is required if a vlan is specified.
        """
        return pulumi.get(self, "source_pif_device")

    @source_pif_device.setter
    def source_pif_device(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_pif_device", value)

    @_builtins.property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The vlan to use for the network. Defaults to `0` meaning no VLAN.
        """
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "vlan", value)


@pulumi.type_token("xenorchestra:index/xoaNetwork:XoaNetwork")
class XoaNetwork(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 automatic: Optional[pulumi.Input[_builtins.bool]] = None,
                 default_is_locked: Optional[pulumi.Input[_builtins.bool]] = None,
                 mtu: Optional[pulumi.Input[_builtins.int]] = None,
                 name_description: Optional[pulumi.Input[_builtins.str]] = None,
                 name_label: Optional[pulumi.Input[_builtins.str]] = None,
                 nbd: Optional[pulumi.Input[_builtins.bool]] = None,
                 pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_pif_device: Optional[pulumi.Input[_builtins.str]] = None,
                 vlan: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_xenorchestra as xenorchestra

        host1 = xenorchestra.get_xoa_host(name_label="Your host")
        # Create a single server network private network
        private_network = xenorchestra.XoaNetwork("private_network",
            name_label="new network name",
            pool_id=host1.pool_id)
        # Create a network with a 22 VLAN tag from the eth0 device
        vlan_network = xenorchestra.XoaNetwork("vlan_network",
            name_label="new network name",
            pool_id=host1.pool_id,
            source_pif_device="eth0",
            vlan=22)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] default_is_locked: This argument controls whether the network should enforce VIF locking. This defaults to `false` which means that no filtering rules are applied.
        :param pulumi.Input[_builtins.int] mtu: The MTU of the network. Defaults to `1500` if unspecified.
        :param pulumi.Input[_builtins.str] name_label: The name label of the network.
        :param pulumi.Input[_builtins.bool] nbd: Whether the network should use a network block device. Defaults to `false` if unspecified.
        :param pulumi.Input[_builtins.str] pool_id: The pool id that this network should belong to.
        :param pulumi.Input[_builtins.str] source_pif_device: The PIF device (eth0, eth1, etc) that will be used as an input during network creation. This parameter is required if a vlan is specified.
        :param pulumi.Input[_builtins.int] vlan: The vlan to use for the network. Defaults to `0` meaning no VLAN.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: XoaNetworkArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_xenorchestra as xenorchestra

        host1 = xenorchestra.get_xoa_host(name_label="Your host")
        # Create a single server network private network
        private_network = xenorchestra.XoaNetwork("private_network",
            name_label="new network name",
            pool_id=host1.pool_id)
        # Create a network with a 22 VLAN tag from the eth0 device
        vlan_network = xenorchestra.XoaNetwork("vlan_network",
            name_label="new network name",
            pool_id=host1.pool_id,
            source_pif_device="eth0",
            vlan=22)
        ```

        :param str resource_name: The name of the resource.
        :param XoaNetworkArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(XoaNetworkArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 automatic: Optional[pulumi.Input[_builtins.bool]] = None,
                 default_is_locked: Optional[pulumi.Input[_builtins.bool]] = None,
                 mtu: Optional[pulumi.Input[_builtins.int]] = None,
                 name_description: Optional[pulumi.Input[_builtins.str]] = None,
                 name_label: Optional[pulumi.Input[_builtins.str]] = None,
                 nbd: Optional[pulumi.Input[_builtins.bool]] = None,
                 pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_pif_device: Optional[pulumi.Input[_builtins.str]] = None,
                 vlan: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = XoaNetworkArgs.__new__(XoaNetworkArgs)

            __props__.__dict__["automatic"] = automatic
            __props__.__dict__["default_is_locked"] = default_is_locked
            __props__.__dict__["mtu"] = mtu
            __props__.__dict__["name_description"] = name_description
            if name_label is None and not opts.urn:
                raise TypeError("Missing required property 'name_label'")
            __props__.__dict__["name_label"] = name_label
            __props__.__dict__["nbd"] = nbd
            if pool_id is None and not opts.urn:
                raise TypeError("Missing required property 'pool_id'")
            __props__.__dict__["pool_id"] = pool_id
            __props__.__dict__["source_pif_device"] = source_pif_device
            __props__.__dict__["vlan"] = vlan
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="xenorchestra:index/network:Network")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(XoaNetwork, __self__).__init__(
            'xenorchestra:index/xoaNetwork:XoaNetwork',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            automatic: Optional[pulumi.Input[_builtins.bool]] = None,
            default_is_locked: Optional[pulumi.Input[_builtins.bool]] = None,
            mtu: Optional[pulumi.Input[_builtins.int]] = None,
            name_description: Optional[pulumi.Input[_builtins.str]] = None,
            name_label: Optional[pulumi.Input[_builtins.str]] = None,
            nbd: Optional[pulumi.Input[_builtins.bool]] = None,
            pool_id: Optional[pulumi.Input[_builtins.str]] = None,
            source_pif_device: Optional[pulumi.Input[_builtins.str]] = None,
            vlan: Optional[pulumi.Input[_builtins.int]] = None) -> 'XoaNetwork':
        """
        Get an existing XoaNetwork resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] default_is_locked: This argument controls whether the network should enforce VIF locking. This defaults to `false` which means that no filtering rules are applied.
        :param pulumi.Input[_builtins.int] mtu: The MTU of the network. Defaults to `1500` if unspecified.
        :param pulumi.Input[_builtins.str] name_label: The name label of the network.
        :param pulumi.Input[_builtins.bool] nbd: Whether the network should use a network block device. Defaults to `false` if unspecified.
        :param pulumi.Input[_builtins.str] pool_id: The pool id that this network should belong to.
        :param pulumi.Input[_builtins.str] source_pif_device: The PIF device (eth0, eth1, etc) that will be used as an input during network creation. This parameter is required if a vlan is specified.
        :param pulumi.Input[_builtins.int] vlan: The vlan to use for the network. Defaults to `0` meaning no VLAN.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _XoaNetworkState.__new__(_XoaNetworkState)

        __props__.__dict__["automatic"] = automatic
        __props__.__dict__["default_is_locked"] = default_is_locked
        __props__.__dict__["mtu"] = mtu
        __props__.__dict__["name_description"] = name_description
        __props__.__dict__["name_label"] = name_label
        __props__.__dict__["nbd"] = nbd
        __props__.__dict__["pool_id"] = pool_id
        __props__.__dict__["source_pif_device"] = source_pif_device
        __props__.__dict__["vlan"] = vlan
        return XoaNetwork(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def automatic(self) -> pulumi.Output[Optional[_builtins.bool]]:
        return pulumi.get(self, "automatic")

    @_builtins.property
    @pulumi.getter(name="defaultIsLocked")
    def default_is_locked(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        This argument controls whether the network should enforce VIF locking. This defaults to `false` which means that no filtering rules are applied.
        """
        return pulumi.get(self, "default_is_locked")

    @_builtins.property
    @pulumi.getter
    def mtu(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        The MTU of the network. Defaults to `1500` if unspecified.
        """
        return pulumi.get(self, "mtu")

    @_builtins.property
    @pulumi.getter(name="nameDescription")
    def name_description(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "name_description")

    @_builtins.property
    @pulumi.getter(name="nameLabel")
    def name_label(self) -> pulumi.Output[_builtins.str]:
        """
        The name label of the network.
        """
        return pulumi.get(self, "name_label")

    @_builtins.property
    @pulumi.getter
    def nbd(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Whether the network should use a network block device. Defaults to `false` if unspecified.
        """
        return pulumi.get(self, "nbd")

    @_builtins.property
    @pulumi.getter(name="poolId")
    def pool_id(self) -> pulumi.Output[_builtins.str]:
        """
        The pool id that this network should belong to.
        """
        return pulumi.get(self, "pool_id")

    @_builtins.property
    @pulumi.getter(name="sourcePifDevice")
    def source_pif_device(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The PIF device (eth0, eth1, etc) that will be used as an input during network creation. This parameter is required if a vlan is specified.
        """
        return pulumi.get(self, "source_pif_device")

    @_builtins.property
    @pulumi.getter
    def vlan(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        The vlan to use for the network. Defaults to `0` meaning no VLAN.
        """
        return pulumi.get(self, "vlan")

