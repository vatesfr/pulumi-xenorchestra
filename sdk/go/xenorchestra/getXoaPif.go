// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package xenorchestra

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/vatesfr/pulumi-xenorchestra/sdk/v2/go/xenorchestra/internal"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/vatesfr/pulumi-xenorchestra/sdk/v2/go/xenorchestra"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			eth0, err := xenorchestra.GetXoaPif(ctx, &xenorchestra.GetXoaPifArgs{
//				Device: "eth0",
//				Vlan:   -1,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = xenorchestra.NewVm(ctx, "demo-vm", &xenorchestra.VmArgs{
//				Networks: xenorchestra.VmNetworkArray{
//					&xenorchestra.VmNetworkArgs{
//						NetworkId: pulumi.String(eth0.Network),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetXoaPif(ctx *pulumi.Context, args *GetXoaPifArgs, opts ...pulumi.InvokeOption) (*GetXoaPifResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetXoaPifResult
	err := ctx.Invoke("xenorchestra:index/getXoaPif:getXoaPif", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getXoaPif.
type GetXoaPifArgs struct {
	// The name of the network device. Examples include eth0, eth1, etc. See `ifconfig` for possible devices.
	Device string `pulumi:"device"`
	// The ID of the host that the PIF belongs to.
	HostId *string `pulumi:"hostId"`
	// The VLAN the PIF belongs to.
	Vlan int `pulumi:"vlan"`
}

// A collection of values returned by getXoaPif.
type GetXoaPifResult struct {
	// If the PIF is attached to the network.
	Attached bool `pulumi:"attached"`
	// In case of a bond slave, the uuid of the bond master.
	BondMaster string `pulumi:"bondMaster"`
	// In case of a bond master, the PIFs (uuid) that are used for this bond.
	BondSlaves []string `pulumi:"bondSlaves"`
	// The name of the network device. Examples include eth0, eth1, etc. See `ifconfig` for possible devices.
	Device string `pulumi:"device"`
	// The host the PIF is associated with.
	Host string `pulumi:"host"`
	// The ID of the host that the PIF belongs to.
	HostId string `pulumi:"hostId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// True if this PIF is a bond master.
	IsBondMaster bool `pulumi:"isBondMaster"`
	// True if this PIF is a bond slave.
	IsBondSlave bool `pulumi:"isBondSlave"`
	// The network the PIF is associated with.
	Network string `pulumi:"network"`
	// The pool the PIF is associated with.
	PoolId string `pulumi:"poolId"`
	// The uuid of the PIF.
	Uuid string `pulumi:"uuid"`
	// The VLAN the PIF belongs to.
	Vlan int `pulumi:"vlan"`
}

func GetXoaPifOutput(ctx *pulumi.Context, args GetXoaPifOutputArgs, opts ...pulumi.InvokeOption) GetXoaPifResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetXoaPifResultOutput, error) {
			args := v.(GetXoaPifArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("xenorchestra:index/getXoaPif:getXoaPif", args, GetXoaPifResultOutput{}, options).(GetXoaPifResultOutput), nil
		}).(GetXoaPifResultOutput)
}

// A collection of arguments for invoking getXoaPif.
type GetXoaPifOutputArgs struct {
	// The name of the network device. Examples include eth0, eth1, etc. See `ifconfig` for possible devices.
	Device pulumi.StringInput `pulumi:"device"`
	// The ID of the host that the PIF belongs to.
	HostId pulumi.StringPtrInput `pulumi:"hostId"`
	// The VLAN the PIF belongs to.
	Vlan pulumi.IntInput `pulumi:"vlan"`
}

func (GetXoaPifOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetXoaPifArgs)(nil)).Elem()
}

// A collection of values returned by getXoaPif.
type GetXoaPifResultOutput struct{ *pulumi.OutputState }

func (GetXoaPifResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetXoaPifResult)(nil)).Elem()
}

func (o GetXoaPifResultOutput) ToGetXoaPifResultOutput() GetXoaPifResultOutput {
	return o
}

func (o GetXoaPifResultOutput) ToGetXoaPifResultOutputWithContext(ctx context.Context) GetXoaPifResultOutput {
	return o
}

// If the PIF is attached to the network.
func (o GetXoaPifResultOutput) Attached() pulumi.BoolOutput {
	return o.ApplyT(func(v GetXoaPifResult) bool { return v.Attached }).(pulumi.BoolOutput)
}

// In case of a bond slave, the uuid of the bond master.
func (o GetXoaPifResultOutput) BondMaster() pulumi.StringOutput {
	return o.ApplyT(func(v GetXoaPifResult) string { return v.BondMaster }).(pulumi.StringOutput)
}

// In case of a bond master, the PIFs (uuid) that are used for this bond.
func (o GetXoaPifResultOutput) BondSlaves() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetXoaPifResult) []string { return v.BondSlaves }).(pulumi.StringArrayOutput)
}

// The name of the network device. Examples include eth0, eth1, etc. See `ifconfig` for possible devices.
func (o GetXoaPifResultOutput) Device() pulumi.StringOutput {
	return o.ApplyT(func(v GetXoaPifResult) string { return v.Device }).(pulumi.StringOutput)
}

// The host the PIF is associated with.
func (o GetXoaPifResultOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v GetXoaPifResult) string { return v.Host }).(pulumi.StringOutput)
}

// The ID of the host that the PIF belongs to.
func (o GetXoaPifResultOutput) HostId() pulumi.StringOutput {
	return o.ApplyT(func(v GetXoaPifResult) string { return v.HostId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetXoaPifResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetXoaPifResult) string { return v.Id }).(pulumi.StringOutput)
}

// True if this PIF is a bond master.
func (o GetXoaPifResultOutput) IsBondMaster() pulumi.BoolOutput {
	return o.ApplyT(func(v GetXoaPifResult) bool { return v.IsBondMaster }).(pulumi.BoolOutput)
}

// True if this PIF is a bond slave.
func (o GetXoaPifResultOutput) IsBondSlave() pulumi.BoolOutput {
	return o.ApplyT(func(v GetXoaPifResult) bool { return v.IsBondSlave }).(pulumi.BoolOutput)
}

// The network the PIF is associated with.
func (o GetXoaPifResultOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v GetXoaPifResult) string { return v.Network }).(pulumi.StringOutput)
}

// The pool the PIF is associated with.
func (o GetXoaPifResultOutput) PoolId() pulumi.StringOutput {
	return o.ApplyT(func(v GetXoaPifResult) string { return v.PoolId }).(pulumi.StringOutput)
}

// The uuid of the PIF.
func (o GetXoaPifResultOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v GetXoaPifResult) string { return v.Uuid }).(pulumi.StringOutput)
}

// The VLAN the PIF belongs to.
func (o GetXoaPifResultOutput) Vlan() pulumi.IntOutput {
	return o.ApplyT(func(v GetXoaPifResult) int { return v.Vlan }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(GetXoaPifResultOutput{})
}
