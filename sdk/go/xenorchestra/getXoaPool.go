// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package xenorchestra

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/vatesfr/pulumi-xenorchestra/sdk/v2/go/xenorchestra/internal"
)

// Provides information about a pool.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/vatesfr/pulumi-xenorchestra/sdk/v2/go/xenorchestra"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			pool, err := xenorchestra.GetXoaPool(ctx, &xenorchestra.GetXoaPoolArgs{
//				NameLabel: "Your pool",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = xenorchestra.GetXoaStorageRepository(ctx, &xenorchestra.GetXoaStorageRepositoryArgs{
//				NameLabel: "Your storage repository label",
//				PoolId:    pulumi.StringRef(pool.Id),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetXoaPool(ctx *pulumi.Context, args *GetXoaPoolArgs, opts ...pulumi.InvokeOption) (*GetXoaPoolResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetXoaPoolResult
	err := ctx.Invoke("xenorchestra:index/getXoaPool:getXoaPool", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getXoaPool.
type GetXoaPoolArgs struct {
	// The nameLabel of the pool to look up.
	NameLabel string `pulumi:"nameLabel"`
}

// A collection of values returned by getXoaPool.
type GetXoaPoolResult struct {
	// CPU information about the pool. The 'cores' key will contain the number of cpu cores and the 'sockets' key will contain the number of sockets.
	Cpus map[string]string `pulumi:"cpus"`
	// The description of the pool.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The id of the primary instance in the pool.
	Master string `pulumi:"master"`
	// The nameLabel of the pool to look up.
	NameLabel string `pulumi:"nameLabel"`
}

func GetXoaPoolOutput(ctx *pulumi.Context, args GetXoaPoolOutputArgs, opts ...pulumi.InvokeOption) GetXoaPoolResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetXoaPoolResultOutput, error) {
			args := v.(GetXoaPoolArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("xenorchestra:index/getXoaPool:getXoaPool", args, GetXoaPoolResultOutput{}, options).(GetXoaPoolResultOutput), nil
		}).(GetXoaPoolResultOutput)
}

// A collection of arguments for invoking getXoaPool.
type GetXoaPoolOutputArgs struct {
	// The nameLabel of the pool to look up.
	NameLabel pulumi.StringInput `pulumi:"nameLabel"`
}

func (GetXoaPoolOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetXoaPoolArgs)(nil)).Elem()
}

// A collection of values returned by getXoaPool.
type GetXoaPoolResultOutput struct{ *pulumi.OutputState }

func (GetXoaPoolResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetXoaPoolResult)(nil)).Elem()
}

func (o GetXoaPoolResultOutput) ToGetXoaPoolResultOutput() GetXoaPoolResultOutput {
	return o
}

func (o GetXoaPoolResultOutput) ToGetXoaPoolResultOutputWithContext(ctx context.Context) GetXoaPoolResultOutput {
	return o
}

// CPU information about the pool. The 'cores' key will contain the number of cpu cores and the 'sockets' key will contain the number of sockets.
func (o GetXoaPoolResultOutput) Cpus() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetXoaPoolResult) map[string]string { return v.Cpus }).(pulumi.StringMapOutput)
}

// The description of the pool.
func (o GetXoaPoolResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetXoaPoolResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetXoaPoolResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetXoaPoolResult) string { return v.Id }).(pulumi.StringOutput)
}

// The id of the primary instance in the pool.
func (o GetXoaPoolResultOutput) Master() pulumi.StringOutput {
	return o.ApplyT(func(v GetXoaPoolResult) string { return v.Master }).(pulumi.StringOutput)
}

// The nameLabel of the pool to look up.
func (o GetXoaPoolResultOutput) NameLabel() pulumi.StringOutput {
	return o.ApplyT(func(v GetXoaPoolResult) string { return v.NameLabel }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetXoaPoolResultOutput{})
}
