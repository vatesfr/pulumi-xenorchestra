// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package xenorchestra

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/vatesfr/pulumi-xenorchestra/sdk/v2/go/xenorchestra/internal"
)

// Creates a Xen Orchestra resource set.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/vatesfr/pulumi-xenorchestra/sdk/v2/go/xenorchestra"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			template, err := xenorchestra.GetXoaTemplate(ctx, &xenorchestra.GetXoaTemplateArgs{
//				NameLabel: "Ubuntu Bionic Beaver 18.04",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			sr, err := xenorchestra.GetXoaStorageRepository(ctx, &xenorchestra.GetXoaStorageRepositoryArgs{
//				NameLabel: "Your storage repository label",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			eth0, err := xenorchestra.GetXoaPif(ctx, &xenorchestra.GetXoaPifArgs{
//				Device: "eth0",
//				Vlan:   -1,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			user, err := xenorchestra.GetXoaUser(ctx, &xenorchestra.GetXoaUserArgs{
//				Username: "test_user",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = xenorchestra.NewResourceSet(ctx, "rs", &xenorchestra.ResourceSetArgs{
//				Name: pulumi.String("new-resource-set"),
//				Subjects: pulumi.StringArray{
//					pulumi.String(user.Id),
//				},
//				Objects: pulumi.StringArray{
//					pulumi.String(template.Id),
//					pulumi.String(sr.Id),
//					pulumi.String(eth0.Network),
//				},
//				Limits: xenorchestra.ResourceSetLimitArray{
//					&xenorchestra.ResourceSetLimitArgs{
//						Type:     pulumi.String("cpus"),
//						Quantity: pulumi.Int(20),
//					},
//					&xenorchestra.ResourceSetLimitArgs{
//						Type:     pulumi.String("disk"),
//						Quantity: pulumi.Int(107374182400),
//					},
//					&xenorchestra.ResourceSetLimitArgs{
//						Type:     pulumi.String("memory"),
//						Quantity: pulumi.Int(12884901888),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ID can be found from the following command:
//
// $ xo-cli resourceSet.getAll
//
// ```sh
// $ pulumi import xenorchestra:index/resourceSet:ResourceSet rs MGSpuwnbtUE
// ```
type ResourceSet struct {
	pulumi.CustomResourceState

	// The limit applied to the resource set.
	Limits ResourceSetLimitArrayOutput `pulumi:"limits"`
	// The name of the resource set.
	Name pulumi.StringOutput `pulumi:"name"`
	// The uuids of the objects that are within scope of the resource set. A minimum of a storage repository, network and VM template are required for users to launch VMs.
	Objects pulumi.StringArrayOutput `pulumi:"objects"`
	// The uuids of the user accounts that should have access to the resource set.
	Subjects pulumi.StringArrayOutput `pulumi:"subjects"`
}

// NewResourceSet registers a new resource with the given unique name, arguments, and options.
func NewResourceSet(ctx *pulumi.Context,
	name string, args *ResourceSetArgs, opts ...pulumi.ResourceOption) (*ResourceSet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Limits == nil {
		return nil, errors.New("invalid value for required argument 'Limits'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ResourceSet
	err := ctx.RegisterResource("xenorchestra:index/resourceSet:ResourceSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceSet gets an existing ResourceSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceSetState, opts ...pulumi.ResourceOption) (*ResourceSet, error) {
	var resource ResourceSet
	err := ctx.ReadResource("xenorchestra:index/resourceSet:ResourceSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceSet resources.
type resourceSetState struct {
	// The limit applied to the resource set.
	Limits []ResourceSetLimit `pulumi:"limits"`
	// The name of the resource set.
	Name *string `pulumi:"name"`
	// The uuids of the objects that are within scope of the resource set. A minimum of a storage repository, network and VM template are required for users to launch VMs.
	Objects []string `pulumi:"objects"`
	// The uuids of the user accounts that should have access to the resource set.
	Subjects []string `pulumi:"subjects"`
}

type ResourceSetState struct {
	// The limit applied to the resource set.
	Limits ResourceSetLimitArrayInput
	// The name of the resource set.
	Name pulumi.StringPtrInput
	// The uuids of the objects that are within scope of the resource set. A minimum of a storage repository, network and VM template are required for users to launch VMs.
	Objects pulumi.StringArrayInput
	// The uuids of the user accounts that should have access to the resource set.
	Subjects pulumi.StringArrayInput
}

func (ResourceSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceSetState)(nil)).Elem()
}

type resourceSetArgs struct {
	// The limit applied to the resource set.
	Limits []ResourceSetLimit `pulumi:"limits"`
	// The name of the resource set.
	Name *string `pulumi:"name"`
	// The uuids of the objects that are within scope of the resource set. A minimum of a storage repository, network and VM template are required for users to launch VMs.
	Objects []string `pulumi:"objects"`
	// The uuids of the user accounts that should have access to the resource set.
	Subjects []string `pulumi:"subjects"`
}

// The set of arguments for constructing a ResourceSet resource.
type ResourceSetArgs struct {
	// The limit applied to the resource set.
	Limits ResourceSetLimitArrayInput
	// The name of the resource set.
	Name pulumi.StringPtrInput
	// The uuids of the objects that are within scope of the resource set. A minimum of a storage repository, network and VM template are required for users to launch VMs.
	Objects pulumi.StringArrayInput
	// The uuids of the user accounts that should have access to the resource set.
	Subjects pulumi.StringArrayInput
}

func (ResourceSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceSetArgs)(nil)).Elem()
}

type ResourceSetInput interface {
	pulumi.Input

	ToResourceSetOutput() ResourceSetOutput
	ToResourceSetOutputWithContext(ctx context.Context) ResourceSetOutput
}

func (*ResourceSet) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSet)(nil)).Elem()
}

func (i *ResourceSet) ToResourceSetOutput() ResourceSetOutput {
	return i.ToResourceSetOutputWithContext(context.Background())
}

func (i *ResourceSet) ToResourceSetOutputWithContext(ctx context.Context) ResourceSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSetOutput)
}

// ResourceSetArrayInput is an input type that accepts ResourceSetArray and ResourceSetArrayOutput values.
// You can construct a concrete instance of `ResourceSetArrayInput` via:
//
//	ResourceSetArray{ ResourceSetArgs{...} }
type ResourceSetArrayInput interface {
	pulumi.Input

	ToResourceSetArrayOutput() ResourceSetArrayOutput
	ToResourceSetArrayOutputWithContext(context.Context) ResourceSetArrayOutput
}

type ResourceSetArray []ResourceSetInput

func (ResourceSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceSet)(nil)).Elem()
}

func (i ResourceSetArray) ToResourceSetArrayOutput() ResourceSetArrayOutput {
	return i.ToResourceSetArrayOutputWithContext(context.Background())
}

func (i ResourceSetArray) ToResourceSetArrayOutputWithContext(ctx context.Context) ResourceSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSetArrayOutput)
}

// ResourceSetMapInput is an input type that accepts ResourceSetMap and ResourceSetMapOutput values.
// You can construct a concrete instance of `ResourceSetMapInput` via:
//
//	ResourceSetMap{ "key": ResourceSetArgs{...} }
type ResourceSetMapInput interface {
	pulumi.Input

	ToResourceSetMapOutput() ResourceSetMapOutput
	ToResourceSetMapOutputWithContext(context.Context) ResourceSetMapOutput
}

type ResourceSetMap map[string]ResourceSetInput

func (ResourceSetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceSet)(nil)).Elem()
}

func (i ResourceSetMap) ToResourceSetMapOutput() ResourceSetMapOutput {
	return i.ToResourceSetMapOutputWithContext(context.Background())
}

func (i ResourceSetMap) ToResourceSetMapOutputWithContext(ctx context.Context) ResourceSetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSetMapOutput)
}

type ResourceSetOutput struct{ *pulumi.OutputState }

func (ResourceSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSet)(nil)).Elem()
}

func (o ResourceSetOutput) ToResourceSetOutput() ResourceSetOutput {
	return o
}

func (o ResourceSetOutput) ToResourceSetOutputWithContext(ctx context.Context) ResourceSetOutput {
	return o
}

// The limit applied to the resource set.
func (o ResourceSetOutput) Limits() ResourceSetLimitArrayOutput {
	return o.ApplyT(func(v *ResourceSet) ResourceSetLimitArrayOutput { return v.Limits }).(ResourceSetLimitArrayOutput)
}

// The name of the resource set.
func (o ResourceSetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceSet) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The uuids of the objects that are within scope of the resource set. A minimum of a storage repository, network and VM template are required for users to launch VMs.
func (o ResourceSetOutput) Objects() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ResourceSet) pulumi.StringArrayOutput { return v.Objects }).(pulumi.StringArrayOutput)
}

// The uuids of the user accounts that should have access to the resource set.
func (o ResourceSetOutput) Subjects() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ResourceSet) pulumi.StringArrayOutput { return v.Subjects }).(pulumi.StringArrayOutput)
}

type ResourceSetArrayOutput struct{ *pulumi.OutputState }

func (ResourceSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceSet)(nil)).Elem()
}

func (o ResourceSetArrayOutput) ToResourceSetArrayOutput() ResourceSetArrayOutput {
	return o
}

func (o ResourceSetArrayOutput) ToResourceSetArrayOutputWithContext(ctx context.Context) ResourceSetArrayOutput {
	return o
}

func (o ResourceSetArrayOutput) Index(i pulumi.IntInput) ResourceSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResourceSet {
		return vs[0].([]*ResourceSet)[vs[1].(int)]
	}).(ResourceSetOutput)
}

type ResourceSetMapOutput struct{ *pulumi.OutputState }

func (ResourceSetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceSet)(nil)).Elem()
}

func (o ResourceSetMapOutput) ToResourceSetMapOutput() ResourceSetMapOutput {
	return o
}

func (o ResourceSetMapOutput) ToResourceSetMapOutputWithContext(ctx context.Context) ResourceSetMapOutput {
	return o
}

func (o ResourceSetMapOutput) MapIndex(k pulumi.StringInput) ResourceSetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResourceSet {
		return vs[0].(map[string]*ResourceSet)[vs[1].(string)]
	}).(ResourceSetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSetInput)(nil)).Elem(), &ResourceSet{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSetArrayInput)(nil)).Elem(), ResourceSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSetMapInput)(nil)).Elem(), ResourceSetMap{})
	pulumi.RegisterOutputType(ResourceSetOutput{})
	pulumi.RegisterOutputType(ResourceSetArrayOutput{})
	pulumi.RegisterOutputType(ResourceSetMapOutput{})
}
